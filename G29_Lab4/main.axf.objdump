
//campus.mcgill.ca/EMF/ELE/yzhu412/Desktop/ECSE324/G29_Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 2c 0c 00 00 30 0c 00 00 34 0c 00 00     @...,...0...4...
  30:	38 0c 00 00 28 0c 00 00 3c 0c 00 00 40 0c 00 00     8...(...<...@...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002ba 	bl	bc4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000d28 	.word	0x00000d28

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001160 	.word	0x00001160

00000124 <__cs3_heap_start_ptr>:
 124:	00001188 	.word	0x00001188

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001168 	.word	0x00001168
 170:	0000116b 	.word	0x0000116b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001168 	.word	0x00001168
 1bc:	00001168 	.word	0x00001168
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001168 	.word	0x00001168
 200:	00000000 	.word	0x00000000
 204:	00000ccc 	.word	0x00000ccc

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ccc 	.word	0x00000ccc
 250:	0000116c 	.word	0x0000116c
 254:	00000d28 	.word	0x00000d28
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/audio.h"

void test_char() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]
	
	for (y=0; y<=59; y++) {
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <test_char+0x70>
		for (x=0; x<=79; x++) {
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <test_char+0x58>
			VGA_write_char_ASM(x, y, c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb0000f6 	bl	684 <VGA_write_char_ASM>
void test_char() {
	int x,y;
	char c = 0;
	
	for (y=0; y<=59; y++) {
		for (x=0; x<=79; x++) {
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004f 	cmp	r3, #79	; 0x4f
 2bc:	dafffff1 	ble	288 <test_char+0x2c>

void test_char() {
	int x,y;
	char c = 0;
	
	for (y=0; y<=59; y++) {
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
		for (x=0; x<=79; x++) {
			VGA_write_char_ASM(x, y, c++);
		}
	}
}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:

void test_byte() {
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]
	
	for (y=0; y<=59; y++) {
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
		for (x=0; x<=79; x+=3) {
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
			VGA_write_byte_ASM(x, y, c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb0000e4 	bl	6c0 <VGA_write_byte_ASM>
void test_byte() {
	int x,y;
	char c = 0;
	
	for (y=0; y<=59; y++) {
		for (x=0; x<=79; x+=3) {
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004f 	cmp	r3, #79	; 0x4f
 340:	dafffff1 	ble	30c <test_byte+0x2c>

void test_byte() {
	int x,y;
	char c = 0;
	
	for (y=0; y<=59; y++) {
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
		for (x=0; x<=79; x+=3) {
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:

void test_pixel() {
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
	int x,y;
	unsigned short colour = 0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]
	
	for (y=0; y<=239; y++) {
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
		for (x=0; x<=319; x++) {
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x,y,colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb0000e5 	bl	74c <VGA_draw_point_ASM>
void test_pixel() {
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
		for (x=0; x<=319; x++) {
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>

void test_pixel() {
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
		for (x=0; x<=319; x++) {
			VGA_draw_point_ASM(x,y,colour++);
		}
	}
}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <vga>:

void vga() {
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	ea000000 	b	400 <vga+0x10>
			VGA_clear_charbuff_ASM();
		}
		else if (PB_data_is_pressed_ASM(PB3)) {
			VGA_clear_pixelbuff_ASM();
		}
	}
 3fc:	e1a00000 	nop			; (mov r0, r0)
	}
}

void vga() {
	while (1) {
		if (read_slider_switches_ASM()!=0 && PB_data_is_pressed_ASM(PB0)){
 400:	eb0000ff 	bl	804 <read_slider_switches_ASM>
 404:	e1a03000 	mov	r3, r0
 408:	e3530000 	cmp	r3, #0
 40c:	0a000006 	beq	42c <vga+0x3c>
 410:	e3a00001 	mov	r0, #1
 414:	eb0000e2 	bl	7a4 <PB_data_is_pressed_ASM>
 418:	e1a03000 	mov	r3, r0
 41c:	e3530000 	cmp	r3, #0
 420:	0a000001 	beq	42c <vga+0x3c>
			test_byte();
 424:	ebffffad 	bl	2e0 <test_byte>
 428:	ea00001f 	b	4ac <vga+0xbc>
			//VGA_write_byte_ASM(0, 0, 0xAA)
		}
		else if(read_slider_switches_ASM()==0 && PB_data_is_pressed_ASM(PB0)){
 42c:	eb0000f4 	bl	804 <read_slider_switches_ASM>
 430:	e1a03000 	mov	r3, r0
 434:	e3530000 	cmp	r3, #0
 438:	1a000006 	bne	458 <vga+0x68>
 43c:	e3a00001 	mov	r0, #1
 440:	eb0000d7 	bl	7a4 <PB_data_is_pressed_ASM>
 444:	e1a03000 	mov	r3, r0
 448:	e3530000 	cmp	r3, #0
 44c:	0a000001 	beq	458 <vga+0x68>
			test_char();
 450:	ebffff81 	bl	25c <test_char>
 454:	ea000014 	b	4ac <vga+0xbc>
		}
		else if (PB_data_is_pressed_ASM(PB1)){
 458:	e3a00002 	mov	r0, #2
 45c:	eb0000d0 	bl	7a4 <PB_data_is_pressed_ASM>
 460:	e1a03000 	mov	r3, r0
 464:	e3530000 	cmp	r3, #0
 468:	0a000001 	beq	474 <vga+0x84>
			test_pixel();
 46c:	ebffffbc 	bl	364 <test_pixel>
			VGA_clear_charbuff_ASM();
		}
		else if (PB_data_is_pressed_ASM(PB3)) {
			VGA_clear_pixelbuff_ASM();
		}
	}
 470:	eaffffe1 	b	3fc <vga+0xc>
			test_char();
		}
		else if (PB_data_is_pressed_ASM(PB1)){
			test_pixel();
		}
		else if (PB_data_is_pressed_ASM(PB2)) {
 474:	e3a00004 	mov	r0, #4
 478:	eb0000c9 	bl	7a4 <PB_data_is_pressed_ASM>
 47c:	e1a03000 	mov	r3, r0
 480:	e3530000 	cmp	r3, #0
 484:	0a000001 	beq	490 <vga+0xa0>
			VGA_clear_charbuff_ASM();
 488:	eb000056 	bl	5e8 <VGA_clear_charbuff_ASM>
		}
		else if (PB_data_is_pressed_ASM(PB3)) {
			VGA_clear_pixelbuff_ASM();
		}
	}
 48c:	eaffffda 	b	3fc <vga+0xc>
			test_pixel();
		}
		else if (PB_data_is_pressed_ASM(PB2)) {
			VGA_clear_charbuff_ASM();
		}
		else if (PB_data_is_pressed_ASM(PB3)) {
 490:	e3a00008 	mov	r0, #8
 494:	eb0000c2 	bl	7a4 <PB_data_is_pressed_ASM>
 498:	e1a03000 	mov	r3, r0
 49c:	e3530000 	cmp	r3, #0
 4a0:	0affffd5 	beq	3fc <vga+0xc>
			VGA_clear_pixelbuff_ASM();
 4a4:	eb000061 	bl	630 <VGA_clear_pixelbuff_ASM>
		}
	}
 4a8:	eaffffd3 	b	3fc <vga+0xc>
 4ac:	eaffffd2 	b	3fc <vga+0xc>

000004b0 <ps2keyboard>:
}

void ps2keyboard() {
 4b0:	e92d4800 	push	{r11, lr}
 4b4:	e28db004 	add	r11, sp, #4
 4b8:	e24dd010 	sub	sp, sp, #16
	// Initialize the variables
	char value;
	int x = 0;
 4bc:	e3a03000 	mov	r3, #0
 4c0:	e50b3008 	str	r3, [r11, #-8]
	int y = 0;
 4c4:	e3a03000 	mov	r3, #0
 4c8:	e50b300c 	str	r3, [r11, #-12]
	// Clear the screen
	VGA_clear_charbuff_ASM();
 4cc:	eb000045 	bl	5e8 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
 4d0:	eb000056 	bl	630 <VGA_clear_pixelbuff_ASM>
 4d4:	ea000000 	b	4dc <ps2keyboard+0x2c>
					y = 0;
					VGA_clear_charbuff_ASM();
				}
			}			
		}
	}
 4d8:	e1a00000 	nop			; (mov r0, r0)
	// Clear the screen
	VGA_clear_charbuff_ASM();
	VGA_clear_pixelbuff_ASM();
	// Write the char in 0,3,5 order
	while(1) {
		if (read_PS2_data_ASM(&value)) {
 4dc:	e24b300d 	sub	r3, r11, #13
 4e0:	e1a00003 	mov	r0, r3
 4e4:	eb0000ca 	bl	814 <read_PS2_data_ASM>
 4e8:	e1a03000 	mov	r3, r0
 4ec:	e3530000 	cmp	r3, #0
 4f0:	0afffff8 	beq	4d8 <ps2keyboard+0x28>
			VGA_write_byte_ASM(x, y, value);
 4f4:	e55b300d 	ldrb	r3, [r11, #-13]
 4f8:	e51b0008 	ldr	r0, [r11, #-8]
 4fc:	e51b100c 	ldr	r1, [r11, #-12]
 500:	e1a02003 	mov	r2, r3
 504:	eb00006d 	bl	6c0 <VGA_write_byte_ASM>
			x += 3;
 508:	e51b3008 	ldr	r3, [r11, #-8]
 50c:	e2833003 	add	r3, r3, #3
 510:	e50b3008 	str	r3, [r11, #-8]
			if (x > 78) {
 514:	e51b3008 	ldr	r3, [r11, #-8]
 518:	e353004e 	cmp	r3, #78	; 0x4e
 51c:	daffffed 	ble	4d8 <ps2keyboard+0x28>
				x = 0;
 520:	e3a03000 	mov	r3, #0
 524:	e50b3008 	str	r3, [r11, #-8]
				y += 1;
 528:	e51b300c 	ldr	r3, [r11, #-12]
 52c:	e2833001 	add	r3, r3, #1
 530:	e50b300c 	str	r3, [r11, #-12]
				if (y > 59) {
 534:	e51b300c 	ldr	r3, [r11, #-12]
 538:	e353003b 	cmp	r3, #59	; 0x3b
 53c:	daffffe5 	ble	4d8 <ps2keyboard+0x28>
					y = 0;
 540:	e3a03000 	mov	r3, #0
 544:	e50b300c 	str	r3, [r11, #-12]
					VGA_clear_charbuff_ASM();
 548:	eb000026 	bl	5e8 <VGA_clear_charbuff_ASM>
				}
			}			
		}
	}
 54c:	eaffffe1 	b	4d8 <ps2keyboard+0x28>

00000550 <audio>:
}
void audio(){
 550:	e92d4800 	push	{r11, lr}
 554:	e28db004 	add	r11, sp, #4
 558:	e24dd008 	sub	sp, sp, #8
				i--;
			}
		}
	}*/
	while(1){
		int i = 0;
 55c:	e3a03000 	mov	r3, #0
 560:	e50b3008 	str	r3, [r11, #-8]
		int j = 0;
 564:	e3a03000 	mov	r3, #0
 568:	e50b300c 	str	r3, [r11, #-12]
		while (i < 240){	
 56c:	ea000007 	b	590 <audio+0x40>
		if(audio_ASM(0x00FFFFFF)==1){
 570:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
 574:	eb0000b2 	bl	844 <audio_ASM>
 578:	e1a03000 	mov	r3, r0
 57c:	e3530001 	cmp	r3, #1
 580:	1a000002 	bne	590 <audio+0x40>
				i++;
 584:	e51b3008 	ldr	r3, [r11, #-8]
 588:	e2833001 	add	r3, r3, #1
 58c:	e50b3008 	str	r3, [r11, #-8]
		}
	}*/
	while(1){
		int i = 0;
		int j = 0;
		while (i < 240){	
 590:	e51b3008 	ldr	r3, [r11, #-8]
 594:	e35300ef 	cmp	r3, #239	; 0xef
 598:	dafffff4 	ble	570 <audio+0x20>
		if(audio_ASM(0x00FFFFFF)==1){
				i++;
			}
		}
		while (j < 240){
 59c:	ea000007 	b	5c0 <audio+0x70>
			if(audio_ASM(0x00000000)==1){
 5a0:	e3a00000 	mov	r0, #0
 5a4:	eb0000a6 	bl	844 <audio_ASM>
 5a8:	e1a03000 	mov	r3, r0
 5ac:	e3530001 	cmp	r3, #1
 5b0:	1a000002 	bne	5c0 <audio+0x70>
				j++;
 5b4:	e51b300c 	ldr	r3, [r11, #-12]
 5b8:	e2833001 	add	r3, r3, #1
 5bc:	e50b300c 	str	r3, [r11, #-12]
		while (i < 240){	
		if(audio_ASM(0x00FFFFFF)==1){
				i++;
			}
		}
		while (j < 240){
 5c0:	e51b300c 	ldr	r3, [r11, #-12]
 5c4:	e35300ef 	cmp	r3, #239	; 0xef
 5c8:	dafffff4 	ble	5a0 <audio+0x50>
			if(audio_ASM(0x00000000)==1){
				j++;
			}
		}
	}
 5cc:	eaffffe2 	b	55c <audio+0xc>

000005d0 <main>:
}

int main(){
 5d0:	e92d4800 	push	{r11, lr}
 5d4:	e28db004 	add	r11, sp, #4
	//vga();
	//ps2keyboard();
	audio();
 5d8:	ebffffdc 	bl	550 <audio>
	return 0;
 5dc:	e3a03000 	mov	r3, #0
}
 5e0:	e1a00003 	mov	r0, r3
 5e4:	e8bd8800 	pop	{r11, pc}

000005e8 <VGA_clear_charbuff_ASM>:
		.global VGA_write_byte_ASM
		.global VGA_draw_point_ASM

VGA_clear_charbuff_ASM:
		
		MOV R0, #80    				// X counter
 5e8:	e3a00050 	mov	r0, #80	; 0x50
		MOV R1, #59	   				// Y counter 
 5ec:	e3a0103b 	mov	r1, #59	; 0x3b
		LDR R2, =CHAR_buffer_BASE 	// Let R2 point to BASE Address
 5f0:	e3a024c9 	mov	r2, #-922746880	; 0xc9000000
		MOV R3, #0					// Use R3 as 0 to clear
 5f4:	e3a03000 	mov	r3, #0

000005f8 <CHAR_CLEAR_X>:

CHAR_CLEAR_X:
		
		SUB R0, R0, #1				// Decrease X counter
 5f8:	e2400001 	sub	r0, r0, #1
		CMP R0, #0					// Compare X counter with 0
 5fc:	e3500000 	cmp	r0, #0
		BLT END_CLEAR_CHAR			// If X less than 0 move to end
 600:	ba000009 	blt	62c <END_CLEAR_CHAR>
		MOV R1, #59 				// Reset Y when each time starts new X
 604:	e3a0103b 	mov	r1, #59	; 0x3b

00000608 <CHAR_CLEAR_Y>:

CHAR_CLEAR_Y:

		CMP R1, #0					// Compare Y counter with 0
 608:	e3510000 	cmp	r1, #0
		BLT CHAR_CLEAR_X			// If Y less than 0 move to X decreasment
 60c:	bafffff9 	blt	5f8 <CHAR_CLEAR_X>
		
		MOV R4, R1					// Get Y counter
 610:	e1a04001 	mov	r4, r1
		LSL R4, #7					// Shift 7 bits to get Y0000000 for buffer address
 614:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R2				// Add Y position in base address
 618:	e1844002 	orr	r4, r4, r2
		ORR R4, R4, R0				// Add X position in base address
 61c:	e1844000 	orr	r4, r4, r0
			
		STRB R3, [R4]				// Store 0 in the location we want to clear
 620:	e5c43000 	strb	r3, [r4]
		SUB R1, R1, #1				// Decrease Y counter	
 624:	e2411001 	sub	r1, r1, #1
		B CHAR_CLEAR_Y				// Back to check next Y counter
 628:	eafffff6 	b	608 <CHAR_CLEAR_Y>

0000062c <END_CLEAR_CHAR>:

END_CLEAR_CHAR:

		BX LR						// Return 
 62c:	e12fff1e 	bx	lr

00000630 <VGA_clear_pixelbuff_ASM>:

VGA_clear_pixelbuff_ASM:
		
		MOV R0, #300    			// X counter
 630:	e3a00f4b 	mov	r0, #300	; 0x12c
		ADD R0, R0, #20				// Add 20 since it cannot handle more than 300
 634:	e2800014 	add	r0, r0, #20
		MOV R1, #239	   			// Y counter 
 638:	e3a010ef 	mov	r1, #239	; 0xef
		LDR R2, =PIX_buffer_BASE 	// Let R2 point to the base Address
 63c:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
		MOV R3, #0					// Use R3 as 0 to clear
 640:	e3a03000 	mov	r3, #0

00000644 <PIX_CLEAR_X>:

PIX_CLEAR_X:
		
		SUB R0, R0, #1				// Decrease X counter
 644:	e2400001 	sub	r0, r0, #1
		CMP R0, #0					// Compare X counter with 0
 648:	e3500000 	cmp	r0, #0
		BLT END_CLEAR_PIX			// If X is less then then return
 64c:	ba00000b 	blt	680 <END_CLEAR_PIX>
		MOV R1, #239 				// Reset Y	
 650:	e3a010ef 	mov	r1, #239	; 0xef

00000654 <PIX_CLEAR_Y>:

PIX_CLEAR_Y:

		CMP R1, #0					// Compare Y counter with 0
 654:	e3510000 	cmp	r1, #0
		BLT PIX_CLEAR_X				// If Y less than 0 move to X decreasment
 658:	bafffff9 	blt	644 <PIX_CLEAR_X>
		
		MOV R4, R1					// Get Y counter
 65c:	e1a04001 	mov	r4, r1
		LSL R4, #10					// Shift 10 bits to get Y0000000000 for buffer address
 660:	e1a04504 	lsl	r4, r4, #10
		ORR R4, R4, R2				// Add Y position in base address
 664:	e1844002 	orr	r4, r4, r2

		MOV R5, R0					// Take the X position
 668:	e1a05000 	mov	r5, r0
		LSL R5, #1					// Shift 1 bit to get X0
 66c:	e1a05085 	lsl	r5, r5, #1
		ORR R4, R4, R5				// Add X position in base address
 670:	e1844005 	orr	r4, r4, r5
			
		STRH R3, [R4]				// Store 0 in the location we want to clear
 674:	e1c430b0 	strh	r3, [r4]
		SUB R1, R1, #1				// Decrease Y counter	
 678:	e2411001 	sub	r1, r1, #1
		B PIX_CLEAR_Y				// Return to clear Y
 67c:	eafffff4 	b	654 <PIX_CLEAR_Y>

00000680 <END_CLEAR_PIX>:

END_CLEAR_PIX:

		BX LR						// Return
 680:	e12fff1e 	bx	lr

00000684 <VGA_write_char_ASM>:

VGA_write_char_ASM:
			
		LDR R3, =CHAR_buffer_BASE	// Let R3 point to the CHAR_buffer_BASE address
 684:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000

		CMP R0, #79					// Check Whether X is in the range
 688:	e350004f 	cmp	r0, #79	; 0x4f
		BGT END_WRITE_CHAR			// If not then return
 68c:	ca00000a 	bgt	6bc <END_WRITE_CHAR>
		CMP R0, #0					// Check Whether X is in the range
 690:	e3500000 	cmp	r0, #0
		BLT END_WRITE_CHAR			// If not then return
 694:	ba000008 	blt	6bc <END_WRITE_CHAR>
		CMP R1, #59					// Check Whether Y is in the range
 698:	e351003b 	cmp	r1, #59	; 0x3b
		BGT END_WRITE_CHAR			// If not then return
 69c:	ca000006 	bgt	6bc <END_WRITE_CHAR>
		CMP R1, #0					// Check Whether Y is in the range
 6a0:	e3510000 	cmp	r1, #0
		BLT END_WRITE_CHAR			// If not then return
 6a4:	ba000004 	blt	6bc <END_WRITE_CHAR>

		MOV R4, R1					// Take the Y position in R4
 6a8:	e1a04001 	mov	r4, r1
		LSL R4, R4, #7				// Shift 7 bits to get Y0000000 for buffer address
 6ac:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R3				// Add Y position in base address
 6b0:	e1844003 	orr	r4, r4, r3
		ORR R4, R4, R0				// Add X position in base address
 6b4:	e1844000 	orr	r4, r4, r0
	
		STRB R2, [R4]				// Write the character we want
 6b8:	e5c42000 	strb	r2, [r4]

000006bc <END_WRITE_CHAR>:

END_WRITE_CHAR:

		BX LR						// Return
 6bc:	e12fff1e 	bx	lr

000006c0 <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
		
		LDR R3, =CHAR_buffer_BASE	// Let R3 point to the CHAR_buffer_BASE address
 6c0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
		
		CMP R0, #79					// Check Whether X is in the range
 6c4:	e350004f 	cmp	r0, #79	; 0x4f
		BGT END_WRITE_BYTE			// If not then return
 6c8:	ca00001e 	bgt	748 <END_WRITE_BYTE>
		CMP R0, #0					// Check Whether X is in the range
 6cc:	e3500000 	cmp	r0, #0
		BLT END_WRITE_BYTE			// If not then return
 6d0:	ba00001c 	blt	748 <END_WRITE_BYTE>
		CMP R1, #59					// Check Whether Y is in the range
 6d4:	e351003b 	cmp	r1, #59	; 0x3b
		BGT END_WRITE_BYTE			// If not then return
 6d8:	ca00001a 	bgt	748 <END_WRITE_BYTE>
		CMP R1, #0					// Check Whether Y is in the range
 6dc:	e3510000 	cmp	r1, #0
		BLT END_WRITE_BYTE			// If not then return
 6e0:	ba000018 	blt	748 <END_WRITE_BYTE>

		MOV R4, R2					// Take the input char into R4
 6e4:	e1a04002 	mov	r4, r2
		LSR R4, R4, #4				// Remove rightmost 4 bits for comparison
 6e8:	e1a04224 	lsr	r4, r4, #4
		CMP R4, #10					// Check whether the digit is a letter or number
 6ec:	e354000a 	cmp	r4, #10
		ADDGE R4, R4, #55			// If it is a letter then assign a correct one with ASCII table
 6f0:	a2844037 	addge	r4, r4, #55	; 0x37
		ADDLT R4, R4, #48			// If it is a number then assign a correct one with ASCII table
 6f4:	b2844030 	addlt	r4, r4, #48	; 0x30
		
		MOV R5, R1					// Take the Y position into R5
 6f8:	e1a05001 	mov	r5, r1
		LSL R5, R5, #7				// Shift 7 bits to get Y0000000 for buffer address
 6fc:	e1a05385 	lsl	r5, r5, #7
		ORR R5, R5, R3				// Add Y position in base address
 700:	e1855003 	orr	r5, r5, r3
		ORR R5, R5, R0 				// Add X position in base address
 704:	e1855000 	orr	r5, r5, r0
		STRB R4, [R5]				// Write the byte into the address we want
 708:	e5c54000 	strb	r4, [r5]

		ADD R0, R0, #1				// Move x to write 1
 70c:	e2800001 	add	r0, r0, #1
		CMP R0, #79					// Check whether X position has reched right side
 710:	e350004f 	cmp	r0, #79	; 0x4f
		MOVGT R0, #0				// If yes then move back to the left side
 714:	c3a00000 	movgt	r0, #0
		ADDGT R1, #1				// And increase Y by 1
 718:	c2811001 	addgt	r1, r1, #1
		CMP R1, #59					// Check Whether Y reaches the bottom
 71c:	e351003b 	cmp	r1, #59	; 0x3b
		MOVGT R1, #0				// If yes then move Y back to the top
 720:	c3a01000 	movgt	r1, #0
									
		AND R2, #0xF				// Keep the last four bits of the input
 724:	e202200f 	and	r2, r2, #15
		CMP R2, #10					// Check whether the digit is a letter or number
 728:	e352000a 	cmp	r2, #10
		ADDGE R2, R2, #55			// If it is a letter then assign a correct one with ASCII table
 72c:	a2822037 	addge	r2, r2, #55	; 0x37
		ADDLT R2, R2, #48			// If it is a number then assign a correct one with ASCII table
 730:	b2822030 	addlt	r2, r2, #48	; 0x30
		MOV R5, R1					// Take the Y position into R5
 734:	e1a05001 	mov	r5, r1
		LSL R5, R5, #7				// Shift 7 bits to get Y0000000 for buffer address
 738:	e1a05385 	lsl	r5, r5, #7
		ORR R5, R5, R3				// Add Y position in base address
 73c:	e1855003 	orr	r5, r5, r3
		ORR R5, R5, R0 				// Add X position in base address
 740:	e1855000 	orr	r5, r5, r0
		STRB R2, [R5]				// Write the byte into the address we want
 744:	e5c52000 	strb	r2, [r5]

00000748 <END_WRITE_BYTE>:

END_WRITE_BYTE:

		BX LR						// Return
 748:	e12fff1e 	bx	lr

0000074c <VGA_draw_point_ASM>:

VGA_draw_point_ASM:

		LDR R3, =PIX_buffer_BASE	// Let R3 point to the PIX_buffer_BASE address
 74c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	
		MOV R4, #300 				// X counter
 750:	e3a04f4b 	mov	r4, #300	; 0x12c
		ADD R4, R4, #19				// Add 19 since it cannot handle more than 300
 754:	e2844013 	add	r4, r4, #19
		CMP R0, R4					// Check whether X is in the range
 758:	e1500004 	cmp	r0, r4
		BGT END_DRAW_POINT			// If not then return
 75c:	ca00000c 	bgt	794 <END_DRAW_POINT>
		CMP R0, #0 					// Check whether X is in the range
 760:	e3500000 	cmp	r0, #0
		BLT END_DRAW_POINT			// If not then return
 764:	ba00000a 	blt	794 <END_DRAW_POINT>
		CMP R1, #239				// Check whether Y is in the range
 768:	e35100ef 	cmp	r1, #239	; 0xef
		BGT END_DRAW_POINT			// If not then return
 76c:	ca000008 	bgt	794 <END_DRAW_POINT>
		CMP R1, #0					// Check whether Y is in the range
 770:	e3510000 	cmp	r1, #0
		BLT END_DRAW_POINT			// If not then return
 774:	ba000006 	blt	794 <END_DRAW_POINT>

		MOV R5, R1					// Take the Y position into R5
 778:	e1a05001 	mov	r5, r1
		LSL R5, R5, #10				// Shift 10 bits to get Y0000000000 for buffer address
 77c:	e1a05505 	lsl	r5, r5, #10
		ORR R5, R5, R3				// Add Y position in base address
 780:	e1855003 	orr	r5, r5, r3
		MOV R6, R0 					// Take the X position into R6
 784:	e1a06000 	mov	r6, r0
		LSL R6, R6, #1				// Shift 1 bit to get X0
 788:	e1a06086 	lsl	r6, r6, #1
		ORR R5, R5, R6 				// Add X position in base address
 78c:	e1855006 	orr	r5, r5, r6
		STRH R2, [R5]				// Write the color we want to the address
 790:	e1c520b0 	strh	r2, [r5]

00000794 <END_DRAW_POINT>:

END_DRAW_POINT:

		BX LR						// Back to main class
 794:	e12fff1e 	bx	lr

00000798 <read_PB_data_ASM>:
			.global disable_PB_INT_ASM


read_PB_data_ASM:					
			
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
 798:	e59f1058 	ldr	r1, [pc, #88]	; 7f8 <disable_PB_INT_ASM+0x10>
			LDR R0, [R1]			// Get the content stored in the memory address and put it into R0
 79c:	e5910000 	ldr	r0, [r1]
			BX LR					
 7a0:	e12fff1e 	bx	lr

000007a4 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:			
	
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
 7a4:	e59f104c 	ldr	r1, [pc, #76]	; 7f8 <disable_PB_INT_ASM+0x10>
			LDR R1, [R1]			// Get the content stored in the memory address and put it into R1
 7a8:	e5911000 	ldr	r1, [r1]
			AND R0, R1, R0			// Check wehther the input stream matches the string in memory
 7ac:	e0010000 	and	r0, r1, r0
			BX LR 					
 7b0:	e12fff1e 	bx	lr

000007b4 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				
	
			LDR R0, =PUSH_EDGE		// Load the memory address of PUSH_edge into R0
 7b4:	e59f0040 	ldr	r0, [pc, #64]	; 7fc <disable_PB_INT_ASM+0x14>
			LDR R0, [R0]			// Get the content stored in the memory address and put it into R0	
 7b8:	e5900000 	ldr	r0, [r0]
			BX LR 	
 7bc:	e12fff1e 	bx	lr

000007c0 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:		

			LDR R1, =PUSH_EDGE		// Load the memory address of PUSH_DATA into R1
 7c0:	e59f1034 	ldr	r1, [pc, #52]	; 7fc <disable_PB_INT_ASM+0x14>
			LDR R1, [R1]			// Get the content stored oin the memory address and put it into R1
 7c4:	e5911000 	ldr	r1, [r1]
			AND R0, R1, R0			// Check wehther the input string matches the string in memory
 7c8:	e0010000 	and	r0, r1, r0
			BX LR 				
 7cc:	e12fff1e 	bx	lr

000007d0 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:			
									
			LDR R1, =PUSH_EDGE		// Load the memory address of PUSH_EDGE into R1
 7d0:	e59f1024 	ldr	r1, [pc, #36]	; 7fc <disable_PB_INT_ASM+0x14>
			STR R0, [R1]			// Store the content of input variable into R0
 7d4:	e5810000 	str	r0, [r1]
			BX LR 					
 7d8:	e12fff1e 	bx	lr

000007dc <enable_PB_INT_ASM>:

enable_PB_INT_ASM:		

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
 7dc:	e59f101c 	ldr	r1, [pc, #28]	; 800 <disable_PB_INT_ASM+0x18>
			STR R0, [R1]			// Store the content of input variable into R0
 7e0:	e5810000 	str	r0, [r1]
			BX LR 					
 7e4:	e12fff1e 	bx	lr

000007e8 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:			

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
 7e8:	e59f1010 	ldr	r1, [pc, #16]	; 800 <disable_PB_INT_ASM+0x18>
			MVN R0, R0				// Invert the imput string
 7ec:	e1e00000 	mvn	r0, r0
			STR R0, [R1]			// Store the content of input variable into R0
 7f0:	e5810000 	str	r0, [r1]
			BX LR 				
 7f4:	e12fff1e 	bx	lr
			.global disable_PB_INT_ASM


read_PB_data_ASM:					
			
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
 7f8:	ff200050 	.word	0xff200050
			AND R0, R1, R0			// Check wehther the input stream matches the string in memory
			BX LR 					

read_PB_edgecap_ASM:				
	
			LDR R0, =PUSH_EDGE		// Load the memory address of PUSH_edge into R0
 7fc:	ff20005c 	.word	0xff20005c
			STR R0, [R1]			// Store the content of input variable into R0
			BX LR 					

enable_PB_INT_ASM:		

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
 800:	ff200058 	.word	0xff200058

00000804 <read_slider_switches_ASM>:
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	
	LDR R1, =SW_BASE
 804:	e59f1004 	ldr	r1, [pc, #4]	; 810 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 808:	e5910000 	ldr	r0, [r1]
	BX LR
 80c:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	
	LDR R1, =SW_BASE
 810:	ff200040 	.word	0xff200040

00000814 <read_PS2_data_ASM>:
	.equ PS2_Control_BASE, 0xFF200104
	.global read_PS2_data_ASM

read_PS2_data_ASM:
		
		LDR R1, =PS2_Data_BASE		// Let R1 point to the address of PS2_Data_BASE
 814:	e59f1024 	ldr	r1, [pc, #36]	; 840 <INVALID+0x8>
		LDR R1, [R1]				// Load the value at the address into R1
 818:	e5911000 	ldr	r1, [r1]
		AND R2, R1, #32768			// Get the value only at the RVALID bit move it into R2
 81c:	e2012902 	and	r2, r1, #32768	; 0x8000
		CMP R2, #0					// Compare R2 with 0
 820:	e3520000 	cmp	r2, #0
		BEQ INVALID					// If R2 is 0 then return invalid
 824:	0a000003 	beq	838 <INVALID>
		
		AND R1, R1, #0xFF			// Otherwise get the last byte in this address
 828:	e20110ff 	and	r1, r1, #255	; 0xff
		STRB R1, [R0]				// Store it as byte format into char pointer
 82c:	e5c01000 	strb	r1, [r0]
		MOV R0, #1					// Return 1 to show it is valid
 830:	e3a00001 	mov	r0, #1
		BX LR						// Return
 834:	e12fff1e 	bx	lr

00000838 <INVALID>:

INVALID: 
		MOV R0, #0					// Return 0 to show it is invalid
 838:	e3a00000 	mov	r0, #0
		BX LR						// Return
 83c:	e12fff1e 	bx	lr
	.equ PS2_Control_BASE, 0xFF200104
	.global read_PS2_data_ASM

read_PS2_data_ASM:
		
		LDR R1, =PS2_Data_BASE		// Let R1 point to the address of PS2_Data_BASE
 840:	ff200100 	.word	0xff200100

00000844 <audio_ASM>:
		.equ RIGHTDATA_BASE, 0xFF20304C
		.global audio_ASM

audio_ASM:

		LDR R1, =FIFOSPACE_BASE		// Let R1 point to the address of FIFOSPACE_BASE
 844:	e59f1040 	ldr	r1, [pc, #64]	; 88c <END_AUDIO+0x4>
		LDR R2, [R1]				// Load the value in R1 into R2
 848:	e5912000 	ldr	r2, [r1]

		AND R3, R2, #0xFF000000		// Load only the WSLC value
 84c:	e20234ff 	and	r3, r2, #-16777216	; 0xff000000
		LSR R3, R3, #24				// Move it to rightmost
 850:	e1a03c23 	lsr	r3, r3, #24
		CMP R3, #0					// Compare the WSLC value with 0
 854:	e3530000 	cmp	r3, #0
		MOVEQ R0, #0				// If it is 0 then return 0 to show invalid
 858:	03a00000 	moveq	r0, #0
		BEQ END_AUDIO				// Return
 85c:	0a000009 	beq	888 <END_AUDIO>

		AND R4, R2, #0x00FF0000		// Load only the WSRC value
 860:	e20248ff 	and	r4, r2, #16711680	; 0xff0000
		LSR R4, R4, #16				// Move it to rightmost
 864:	e1a04824 	lsr	r4, r4, #16
		CMP R4, #0					// Compare the WSRC value with 0
 868:	e3540000 	cmp	r4, #0
		MOVEQ R0, #0				// If it is 0 then return 0 to show invalid
 86c:	03a00000 	moveq	r0, #0
		BEQ END_AUDIO				// Return
 870:	0a000004 	beq	888 <END_AUDIO>

		LDR R5, =LEFTDATA_BASE		// Let R5 point to the address of LEFTDATA_BASE
 874:	e59f5014 	ldr	r5, [pc, #20]	; 890 <END_AUDIO+0x8>
		LDR R6, =RIGHTDATA_BASE		// Let R6 point to the address of RIGHTDATA_BASE
 878:	e59f6014 	ldr	r6, [pc, #20]	; 894 <END_AUDIO+0xc>
			
		STR R0, [R5]				// Store R0 in to LEFTDATA_BASE address
 87c:	e5850000 	str	r0, [r5]
		STR R0, [R6]				// Store R0 in to RIGHTDATA_BASE address
 880:	e5860000 	str	r0, [r6]
		MOV R0, #1					// Return one to show ths value is valid
 884:	e3a00001 	mov	r0, #1

00000888 <END_AUDIO>:

END_AUDIO:		
		BX LR						// Return
 888:	e12fff1e 	bx	lr
		.equ RIGHTDATA_BASE, 0xFF20304C
		.global audio_ASM

audio_ASM:

		LDR R1, =FIFOSPACE_BASE		// Let R1 point to the address of FIFOSPACE_BASE
 88c:	ff203044 	.word	0xff203044
		LSR R4, R4, #16				// Move it to rightmost
		CMP R4, #0					// Compare the WSRC value with 0
		MOVEQ R0, #0				// If it is 0 then return 0 to show invalid
		BEQ END_AUDIO				// Return

		LDR R5, =LEFTDATA_BASE		// Let R5 point to the address of LEFTDATA_BASE
 890:	ff203048 	.word	0xff203048
		LDR R6, =RIGHTDATA_BASE		// Let R6 point to the address of RIGHTDATA_BASE
 894:	ff20304c 	.word	0xff20304c

00000898 <atexit>:
 898:	e1a01000 	mov	r1, r0
 89c:	e3a00000 	mov	r0, #0
 8a0:	e92d4008 	push	{r3, lr}
 8a4:	e1a02000 	mov	r2, r0
 8a8:	e1a03000 	mov	r3, r0
 8ac:	eb00000e 	bl	8ec <__register_exitproc>
 8b0:	e8bd4008 	pop	{r3, lr}
 8b4:	e12fff1e 	bx	lr

000008b8 <exit>:
 8b8:	e92d4008 	push	{r3, lr}
 8bc:	e3a01000 	mov	r1, #0
 8c0:	e1a04000 	mov	r4, r0
 8c4:	eb000045 	bl	9e0 <__call_exitprocs>
 8c8:	e59f3018 	ldr	r3, [pc, #24]	; 8e8 <exit+0x30>
 8cc:	e5930000 	ldr	r0, [r3]
 8d0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 8d4:	e3530000 	cmp	r3, #0
 8d8:	11a0e00f 	movne	lr, pc
 8dc:	112fff13 	bxne	r3
 8e0:	e1a00004 	mov	r0, r4
 8e4:	eb0000c9 	bl	c10 <_exit>
 8e8:	00000cd0 	.word	0x00000cd0

000008ec <__register_exitproc>:
 8ec:	e59fc0e4 	ldr	r12, [pc, #228]	; 9d8 <__register_exitproc+0xec>
 8f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8f4:	e59c4000 	ldr	r4, [r12]
 8f8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 8fc:	e35c0000 	cmp	r12, #0
 900:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 904:	e59c5004 	ldr	r5, [r12, #4]
 908:	0584c148 	streq	r12, [r4, #328]	; 0x148
 90c:	e355001f 	cmp	r5, #31
 910:	e24dd010 	sub	sp, sp, #16
 914:	e1a06000 	mov	r6, r0
 918:	da000015 	ble	974 <__register_exitproc+0x88>
 91c:	e59f00b8 	ldr	r0, [pc, #184]	; 9dc <__register_exitproc+0xf0>
 920:	e3500000 	cmp	r0, #0
 924:	1a000001 	bne	930 <__register_exitproc+0x44>
 928:	e3e00000 	mvn	r0, #0
 92c:	ea000018 	b	994 <__register_exitproc+0xa8>
 930:	e3a00e19 	mov	r0, #400	; 0x190
 934:	e58d100c 	str	r1, [sp, #12]
 938:	e58d2008 	str	r2, [sp, #8]
 93c:	e58d3004 	str	r3, [sp, #4]
 940:	e320f000 	nop	{0}
 944:	e250c000 	subs	r12, r0, #0
 948:	e59d100c 	ldr	r1, [sp, #12]
 94c:	e59d2008 	ldr	r2, [sp, #8]
 950:	e59d3004 	ldr	r3, [sp, #4]
 954:	0afffff3 	beq	928 <__register_exitproc+0x3c>
 958:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 95c:	e3a00000 	mov	r0, #0
 960:	e58c0004 	str	r0, [r12, #4]
 964:	e58c5000 	str	r5, [r12]
 968:	e584c148 	str	r12, [r4, #328]	; 0x148
 96c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 970:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 974:	e3560000 	cmp	r6, #0
 978:	e59c4004 	ldr	r4, [r12, #4]
 97c:	1a000007 	bne	9a0 <__register_exitproc+0xb4>
 980:	e2843002 	add	r3, r4, #2
 984:	e2844001 	add	r4, r4, #1
 988:	e78c1103 	str	r1, [r12, r3, lsl #2]
 98c:	e58c4004 	str	r4, [r12, #4]
 990:	e3a00000 	mov	r0, #0
 994:	e28dd010 	add	sp, sp, #16
 998:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 99c:	e12fff1e 	bx	lr
 9a0:	e3a00001 	mov	r0, #1
 9a4:	e1a00410 	lsl	r0, r0, r4
 9a8:	e08c8104 	add	r8, r12, r4, lsl #2
 9ac:	e3560002 	cmp	r6, #2
 9b0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 9b4:	e5883108 	str	r3, [r8, #264]	; 0x108
 9b8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 9bc:	e1877000 	orr	r7, r7, r0
 9c0:	01830000 	orreq	r0, r3, r0
 9c4:	e1a05008 	mov	r5, r8
 9c8:	e5882088 	str	r2, [r8, #136]	; 0x88
 9cc:	e58c7188 	str	r7, [r12, #392]	; 0x188
 9d0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 9d4:	eaffffe9 	b	980 <__register_exitproc+0x94>
 9d8:	00000cd0 	.word	0x00000cd0
 9dc:	00000000 	.word	0x00000000

000009e0 <__call_exitprocs>:
 9e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 9e4:	e59f3168 	ldr	r3, [pc, #360]	; b54 <__call_exitprocs+0x174>
 9e8:	e5933000 	ldr	r3, [r3]
 9ec:	e24dd014 	sub	sp, sp, #20
 9f0:	e58d3004 	str	r3, [sp, #4]
 9f4:	e2833f52 	add	r3, r3, #328	; 0x148
 9f8:	e58d0008 	str	r0, [sp, #8]
 9fc:	e58d300c 	str	r3, [sp, #12]
 a00:	e1a07001 	mov	r7, r1
 a04:	e3a08001 	mov	r8, #1
 a08:	e59d3004 	ldr	r3, [sp, #4]
 a0c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 a10:	e3560000 	cmp	r6, #0
 a14:	e59db00c 	ldr	r11, [sp, #12]
 a18:	0a000033 	beq	aec <__call_exitprocs+0x10c>
 a1c:	e5965004 	ldr	r5, [r6, #4]
 a20:	e2554001 	subs	r4, r5, #1
 a24:	5286a088 	addpl	r10, r6, #136	; 0x88
 a28:	5285501f 	addpl	r5, r5, #31
 a2c:	508a5105 	addpl	r5, r10, r5, lsl #2
 a30:	5a000007 	bpl	a54 <__call_exitprocs+0x74>
 a34:	ea000029 	b	ae0 <__call_exitprocs+0x100>
 a38:	e5953000 	ldr	r3, [r5]
 a3c:	e1530007 	cmp	r3, r7
 a40:	0a000005 	beq	a5c <__call_exitprocs+0x7c>
 a44:	e2444001 	sub	r4, r4, #1
 a48:	e3740001 	cmn	r4, #1
 a4c:	e2455004 	sub	r5, r5, #4
 a50:	0a000022 	beq	ae0 <__call_exitprocs+0x100>
 a54:	e3570000 	cmp	r7, #0
 a58:	1afffff6 	bne	a38 <__call_exitprocs+0x58>
 a5c:	e5963004 	ldr	r3, [r6, #4]
 a60:	e06a2005 	rsb	r2, r10, r5
 a64:	e2433001 	sub	r3, r3, #1
 a68:	e0862002 	add	r2, r6, r2
 a6c:	e1530004 	cmp	r3, r4
 a70:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a74:	13a01000 	movne	r1, #0
 a78:	05864004 	streq	r4, [r6, #4]
 a7c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a80:	e3530000 	cmp	r3, #0
 a84:	0affffee 	beq	a44 <__call_exitprocs+0x64>
 a88:	e1a02418 	lsl	r2, r8, r4
 a8c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a90:	e1120001 	tst	r2, r1
 a94:	e5969004 	ldr	r9, [r6, #4]
 a98:	0a000016 	beq	af8 <__call_exitprocs+0x118>
 a9c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 aa0:	e1120001 	tst	r2, r1
 aa4:	1a000016 	bne	b04 <__call_exitprocs+0x124>
 aa8:	e59d0008 	ldr	r0, [sp, #8]
 aac:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 ab0:	e1a0e00f 	mov	lr, pc
 ab4:	e12fff13 	bx	r3
 ab8:	e5963004 	ldr	r3, [r6, #4]
 abc:	e1530009 	cmp	r3, r9
 ac0:	1affffd0 	bne	a08 <__call_exitprocs+0x28>
 ac4:	e59b3000 	ldr	r3, [r11]
 ac8:	e1530006 	cmp	r3, r6
 acc:	1affffcd 	bne	a08 <__call_exitprocs+0x28>
 ad0:	e2444001 	sub	r4, r4, #1
 ad4:	e3740001 	cmn	r4, #1
 ad8:	e2455004 	sub	r5, r5, #4
 adc:	1affffdc 	bne	a54 <__call_exitprocs+0x74>
 ae0:	e59f1070 	ldr	r1, [pc, #112]	; b58 <__call_exitprocs+0x178>
 ae4:	e3510000 	cmp	r1, #0
 ae8:	1a000009 	bne	b14 <__call_exitprocs+0x134>
 aec:	e28dd014 	add	sp, sp, #20
 af0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 af4:	e12fff1e 	bx	lr
 af8:	e1a0e00f 	mov	lr, pc
 afc:	e12fff13 	bx	r3
 b00:	eaffffec 	b	ab8 <__call_exitprocs+0xd8>
 b04:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 b08:	e1a0e00f 	mov	lr, pc
 b0c:	e12fff13 	bx	r3
 b10:	eaffffe8 	b	ab8 <__call_exitprocs+0xd8>
 b14:	e5963004 	ldr	r3, [r6, #4]
 b18:	e3530000 	cmp	r3, #0
 b1c:	e5963000 	ldr	r3, [r6]
 b20:	1a000008 	bne	b48 <__call_exitprocs+0x168>
 b24:	e3530000 	cmp	r3, #0
 b28:	0a000006 	beq	b48 <__call_exitprocs+0x168>
 b2c:	e1a00006 	mov	r0, r6
 b30:	e58b3000 	str	r3, [r11]
 b34:	e320f000 	nop	{0}
 b38:	e59b6000 	ldr	r6, [r11]
 b3c:	e3560000 	cmp	r6, #0
 b40:	1affffb5 	bne	a1c <__call_exitprocs+0x3c>
 b44:	eaffffe8 	b	aec <__call_exitprocs+0x10c>
 b48:	e1a0b006 	mov	r11, r6
 b4c:	e1a06003 	mov	r6, r3
 b50:	eafffff9 	b	b3c <__call_exitprocs+0x15c>
 b54:	00000cd0 	.word	0x00000cd0
 b58:	00000000 	.word	0x00000000

00000b5c <register_fini>:
 b5c:	e92d4008 	push	{r3, lr}
 b60:	e59f3010 	ldr	r3, [pc, #16]	; b78 <register_fini+0x1c>
 b64:	e3530000 	cmp	r3, #0
 b68:	159f000c 	ldrne	r0, [pc, #12]	; b7c <register_fini+0x20>
 b6c:	1bffff49 	blne	898 <atexit>
 b70:	e8bd4008 	pop	{r3, lr}
 b74:	e12fff1e 	bx	lr
 b78:	00000cf8 	.word	0x00000cf8
 b7c:	00000b80 	.word	0x00000b80

00000b80 <__libc_fini_array>:
 b80:	e92d4038 	push	{r3, r4, r5, lr}
 b84:	e59f5030 	ldr	r5, [pc, #48]	; bbc <__libc_fini_array+0x3c>
 b88:	e59f4030 	ldr	r4, [pc, #48]	; bc0 <__libc_fini_array+0x40>
 b8c:	e0654004 	rsb	r4, r5, r4
 b90:	e1b04144 	asrs	r4, r4, #2
 b94:	10855104 	addne	r5, r5, r4, lsl #2
 b98:	0a000004 	beq	bb0 <__libc_fini_array+0x30>
 b9c:	e5353004 	ldr	r3, [r5, #-4]!
 ba0:	e1a0e00f 	mov	lr, pc
 ba4:	e12fff13 	bx	r3
 ba8:	e2544001 	subs	r4, r4, #1
 bac:	1afffffa 	bne	b9c <__libc_fini_array+0x1c>
 bb0:	eb000050 	bl	cf8 <__libc_fini>
 bb4:	e8bd4038 	pop	{r3, r4, r5, lr}
 bb8:	e12fff1e 	bx	lr
 bbc:	00000d10 	.word	0x00000d10
 bc0:	00000d14 	.word	0x00000d14

00000bc4 <__cs3_premain>:
 bc4:	e92d4008 	push	{r3, lr}
 bc8:	eb00001d 	bl	c44 <__libc_init_array>
 bcc:	e59f3030 	ldr	r3, [pc, #48]	; c04 <__cs3_premain+0x40>
 bd0:	e3530000 	cmp	r3, #0
 bd4:	15930000 	ldrne	r0, [r3]
 bd8:	01a00003 	moveq	r0, r3
 bdc:	e59f3024 	ldr	r3, [pc, #36]	; c08 <__cs3_premain+0x44>
 be0:	e3530000 	cmp	r3, #0
 be4:	15931000 	ldrne	r1, [r3]
 be8:	01a01003 	moveq	r1, r3
 bec:	e3a02000 	mov	r2, #0
 bf0:	ebfffe76 	bl	5d0 <main>
 bf4:	e59f3010 	ldr	r3, [pc, #16]	; c0c <__cs3_premain+0x48>
 bf8:	e3530000 	cmp	r3, #0
 bfc:	1bffff2d 	blne	8b8 <exit>
 c00:	eafffffe 	b	c00 <__cs3_premain+0x3c>
	...
 c0c:	000008b8 	.word	0x000008b8

00000c10 <_exit>:
 c10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 c14:	e3a00018 	mov	r0, #24
 c18:	e59f1004 	ldr	r1, [pc, #4]	; c24 <_exit+0x14>
 c1c:	ef123456 	svc	0x00123456
 c20:	eafffffe 	b	c20 <_exit+0x10>
 c24:	00020026 	.word	0x00020026

00000c28 <__cs3_isr_interrupt>:
 c28:	eafffffe 	b	c28 <__cs3_isr_interrupt>

00000c2c <__cs3_isr_undef>:
 c2c:	eafffffe 	b	c2c <__cs3_isr_undef>

00000c30 <__cs3_isr_swi>:
 c30:	eafffffe 	b	c30 <__cs3_isr_swi>

00000c34 <__cs3_isr_pabort>:
 c34:	eafffffe 	b	c34 <__cs3_isr_pabort>

00000c38 <__cs3_isr_dabort>:
 c38:	eafffffe 	b	c38 <__cs3_isr_dabort>

00000c3c <__cs3_isr_irq>:
 c3c:	eafffffe 	b	c3c <__cs3_isr_irq>

00000c40 <__cs3_isr_fiq>:
 c40:	eafffffe 	b	c40 <__cs3_isr_fiq>

00000c44 <__libc_init_array>:
 c44:	e92d4070 	push	{r4, r5, r6, lr}
 c48:	e59f506c 	ldr	r5, [pc, #108]	; cbc <__libc_init_array+0x78>
 c4c:	e59f606c 	ldr	r6, [pc, #108]	; cc0 <__libc_init_array+0x7c>
 c50:	e0656006 	rsb	r6, r5, r6
 c54:	e1b06146 	asrs	r6, r6, #2
 c58:	12455004 	subne	r5, r5, #4
 c5c:	13a04000 	movne	r4, #0
 c60:	0a000005 	beq	c7c <__libc_init_array+0x38>
 c64:	e5b53004 	ldr	r3, [r5, #4]!
 c68:	e2844001 	add	r4, r4, #1
 c6c:	e1a0e00f 	mov	lr, pc
 c70:	e12fff13 	bx	r3
 c74:	e1560004 	cmp	r6, r4
 c78:	1afffff9 	bne	c64 <__libc_init_array+0x20>
 c7c:	e59f5040 	ldr	r5, [pc, #64]	; cc4 <__libc_init_array+0x80>
 c80:	e59f6040 	ldr	r6, [pc, #64]	; cc8 <__libc_init_array+0x84>
 c84:	e0656006 	rsb	r6, r5, r6
 c88:	eb000012 	bl	cd8 <_init>
 c8c:	e1b06146 	asrs	r6, r6, #2
 c90:	12455004 	subne	r5, r5, #4
 c94:	13a04000 	movne	r4, #0
 c98:	0a000005 	beq	cb4 <__libc_init_array+0x70>
 c9c:	e5b53004 	ldr	r3, [r5, #4]!
 ca0:	e2844001 	add	r4, r4, #1
 ca4:	e1a0e00f 	mov	lr, pc
 ca8:	e12fff13 	bx	r3
 cac:	e1560004 	cmp	r6, r4
 cb0:	1afffff9 	bne	c9c <__libc_init_array+0x58>
 cb4:	e8bd4070 	pop	{r4, r5, r6, lr}
 cb8:	e12fff1e 	bx	lr
 cbc:	00000cf0 	.word	0x00000cf0
 cc0:	00000cf0 	.word	0x00000cf0
 cc4:	00000cf0 	.word	0x00000cf0
 cc8:	00000cf8 	.word	0x00000cf8

Disassembly of section .rodata:

00000cd0 <_global_impure_ptr>:
 cd0:	00000d38 00000043                       8...C...

00000cd8 <_init>:
 cd8:	e1a0c00d 	mov	r12, sp
 cdc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ce0:	e24cb004 	sub	r11, r12, #4
 ce4:	e24bd028 	sub	sp, r11, #40	; 0x28
 ce8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 cec:	e12fff1e 	bx	lr

00000cf0 <__init_array_start>:
 cf0:	00000b5c 	.word	0x00000b5c

00000cf4 <__frame_dummy_init_array_entry>:
 cf4:	00000208                                ....

00000cf8 <__libc_fini>:
 cf8:	e1a0c00d 	mov	r12, sp
 cfc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d00:	e24cb004 	sub	r11, r12, #4
 d04:	e24bd028 	sub	sp, r11, #40	; 0x28
 d08:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d0c:	e12fff1e 	bx	lr

00000d10 <__fini_array_start>:
 d10:	000001c4 	.word	0x000001c4

00000d14 <__cs3_regions>:
	...
 d20:	00001168 	.word	0x00001168
 d24:	00000020 	.word	0x00000020
