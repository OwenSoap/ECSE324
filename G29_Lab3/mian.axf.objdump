
//campus.mcgill.ca/EMF/ELE/yzhu412/Desktop/ECSE324/G29_Lab3/mian.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	88 0e 00 00 94 0e 00 00 a0 0e 00 00 ac 0e 00 00     ................
  30:	b8 0e 00 00 c8 12 00 00 30 0d 00 00 c4 0e 00 00     ........0.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000462 	bl	1264 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000013b8 	.word	0x000013b8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000017f0 	.word	0x000017f0

00000124 <__cs3_heap_start_ptr>:
     124:	00001818 	.word	0x00001818

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000017f8 	.word	0x000017f8
     170:	000017fb 	.word	0x000017fb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000017f8 	.word	0x000017f8
     1bc:	000017f8 	.word	0x000017f8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000017f8 	.word	0x000017f8
     200:	00000000 	.word	0x00000000
     204:	00001354 	.word	0x00001354

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001354 	.word	0x00001354
     250:	000017fc 	.word	0x000017fc
     254:	000013b8 	.word	0x000013b8
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/int_setup.h"
#include "./drivers/inc/ISRs.h"

int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd030 	sub	sp, sp, #48	; 0x30
	}

*/
//Interrupt stopwatch

	int_setup(2, (int []) {73, 199});				// Enable interrupts ID for PB_KEY (73) and Timer(199)
     268:	e3013358 	movw	r3, #4952	; 0x1358
     26c:	e3403000 	movt	r3, #0
     270:	e24b201c 	sub	r2, r11, #28
     274:	e8930003 	ldm	r3, {r0, r1}
     278:	e8820003 	stm	r2, {r0, r1}
     27c:	e24b301c 	sub	r3, r11, #28
     280:	e3a00002 	mov	r0, #2
     284:	e1a01003 	mov	r1, r3
     288:	eb00031c 	bl	f00 <int_setup>
	enable_PB_INT_ASM(PB0 | PB1 | PB2);				// Enable interrupts for pushbuttons
     28c:	e3a00007 	mov	r0, #7
     290:	eb000187 	bl	8b4 <enable_PB_INT_ASM>
	
	// Initialize all parameters
	int ms = 0;
     294:	e3a03000 	mov	r3, #0
     298:	e50b3008 	str	r3, [r11, #-8]
	int s = 0;
     29c:	e3a03000 	mov	r3, #0
     2a0:	e50b300c 	str	r3, [r11, #-12]
	int min = 0;
     2a4:	e3a03000 	mov	r3, #0
     2a8:	e50b3010 	str	r3, [r11, #-16]
	int enable = 1;
     2ac:	e3a03001 	mov	r3, #1
     2b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     2b4:	e3a03001 	mov	r3, #1
     2b8:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout = 1000;
     2bc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
     2c0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en = 1;
     2c4:	e3a03001 	mov	r3, #1
     2c8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en = 1;
     2cc:	e3a03001 	mov	r3, #1
     2d0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable = 1;
     2d4:	e3a03001 	mov	r3, #1
     2d8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	HPS_TIM_config_ASM(&hps_tim);
     2dc:	e24b3030 	sub	r3, r11, #48	; 0x30
     2e0:	e1a00003 	mov	r0, r3
     2e4:	eb00017c 	bl	8dc <HPS_TIM_config_ASM>
     2e8:	ea000000 	b	2f0 <main+0x94>
				enable = 0;
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
			}
			PB_INT_FLAG = 0;			// Put down the pushbutton interrupt flag
		}
	}
     2ec:	e1a00000 	nop			; (mov r0, r0)
	HPS_TIM_config_ASM(&hps_tim);

	while(1) {

		// If the timer interrupt flag is on then enter the block
		if (HPS_TIM0_INT_FLAG) { 
     2f0:	e3003a68 	movw	r3, #2664	; 0xa68
     2f4:	e3403000 	movt	r3, #0
     2f8:	e5933000 	ldr	r3, [r3]
     2fc:	e3530000 	cmp	r3, #0
     300:	0a000077 	beq	4e4 <main+0x288>
			// If the timer is on then start the timer 
			if (enable) {
     304:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     308:	e3530000 	cmp	r3, #0
     30c:	0a000070 	beq	4d4 <main+0x278>
				ms += 1; 		// Increcement 1ms each time
     310:	e51b3008 	ldr	r3, [r11, #-8]
     314:	e2833001 	add	r3, r3, #1
     318:	e50b3008 	str	r3, [r11, #-8]
				// If millisecond reaches 1000 then increase the second
				if (ms == 1000) {
     31c:	e51b3008 	ldr	r3, [r11, #-8]
     320:	e3530ffa 	cmp	r3, #1000	; 0x3e8
     324:	1a000004 	bne	33c <main+0xe0>
					ms = 0;
     328:	e3a03000 	mov	r3, #0
     32c:	e50b3008 	str	r3, [r11, #-8]
					s++;
     330:	e51b300c 	ldr	r3, [r11, #-12]
     334:	e2833001 	add	r3, r3, #1
     338:	e50b300c 	str	r3, [r11, #-12]
				}
				// If second reaches 60 then increase the minute
				if (s == 60) {
     33c:	e51b300c 	ldr	r3, [r11, #-12]
     340:	e353003c 	cmp	r3, #60	; 0x3c
     344:	1a000004 	bne	35c <main+0x100>
					s = 0;
     348:	e3a03000 	mov	r3, #0
     34c:	e50b300c 	str	r3, [r11, #-12]
					min++;
     350:	e51b3010 	ldr	r3, [r11, #-16]
     354:	e2833001 	add	r3, r3, #1
     358:	e50b3010 	str	r3, [r11, #-16]
				}
				// If minute reaches 60 then set everything to be zero
				if (min == 60) {
     35c:	e51b3010 	ldr	r3, [r11, #-16]
     360:	e353003c 	cmp	r3, #60	; 0x3c
     364:	1a000005 	bne	380 <main+0x124>
					min = 0;
     368:	e3a03000 	mov	r3, #0
     36c:	e50b3010 	str	r3, [r11, #-16]
					s = 0;
     370:	e3a03000 	mov	r3, #0
     374:	e50b300c 	str	r3, [r11, #-12]
					ms = 0;
     378:	e3a03000 	mov	r3, #0
     37c:	e50b3008 	str	r3, [r11, #-8]
				}
				HEX_write_ASM(HEX0, ((ms % 100) / 10));	// HEX0 displays 10 ms
     380:	e51b2008 	ldr	r2, [r11, #-8]
     384:	e308351f 	movw	r3, #34079	; 0x851f
     388:	e34531eb 	movt	r3, #20971	; 0x51eb
     38c:	e0c31293 	smull	r1, r3, r3, r2
     390:	e1a012c3 	asr	r1, r3, #5
     394:	e1a03fc2 	asr	r3, r2, #31
     398:	e0633001 	rsb	r3, r3, r1
     39c:	e3a01064 	mov	r1, #100	; 0x64
     3a0:	e0030391 	mul	r3, r1, r3
     3a4:	e0633002 	rsb	r3, r3, r2
     3a8:	e3062667 	movw	r2, #26215	; 0x6667
     3ac:	e3462666 	movt	r2, #26214	; 0x6666
     3b0:	e0c21392 	smull	r1, r2, r2, r3
     3b4:	e1a02142 	asr	r2, r2, #2
     3b8:	e1a03fc3 	asr	r3, r3, #31
     3bc:	e0633002 	rsb	r3, r3, r2
     3c0:	e6ef3073 	uxtb	r3, r3
     3c4:	e3a00001 	mov	r0, #1
     3c8:	e1a01003 	mov	r1, r3
     3cc:	eb0000be 	bl	6cc <HEX_write_ASM>
				HEX_write_ASM(HEX1, (ms / 100));  		// HEX1 displays  100ms
     3d0:	e51b2008 	ldr	r2, [r11, #-8]
     3d4:	e308351f 	movw	r3, #34079	; 0x851f
     3d8:	e34531eb 	movt	r3, #20971	; 0x51eb
     3dc:	e0c31293 	smull	r1, r3, r3, r2
     3e0:	e1a012c3 	asr	r1, r3, #5
     3e4:	e1a03fc2 	asr	r3, r2, #31
     3e8:	e0633001 	rsb	r3, r3, r1
     3ec:	e6ef3073 	uxtb	r3, r3
     3f0:	e3a00002 	mov	r0, #2
     3f4:	e1a01003 	mov	r1, r3
     3f8:	eb0000b3 	bl	6cc <HEX_write_ASM>
				HEX_write_ASM(HEX2, (s % 10));			// HEX2 displays  1s
     3fc:	e51b100c 	ldr	r1, [r11, #-12]
     400:	e3063667 	movw	r3, #26215	; 0x6667
     404:	e3463666 	movt	r3, #26214	; 0x6666
     408:	e0c32193 	smull	r2, r3, r3, r1
     40c:	e1a02143 	asr	r2, r3, #2
     410:	e1a03fc1 	asr	r3, r1, #31
     414:	e0632002 	rsb	r2, r3, r2
     418:	e1a03002 	mov	r3, r2
     41c:	e1a03103 	lsl	r3, r3, #2
     420:	e0833002 	add	r3, r3, r2
     424:	e1a03083 	lsl	r3, r3, #1
     428:	e0632001 	rsb	r2, r3, r1
     42c:	e6ef3072 	uxtb	r3, r2
     430:	e3a00004 	mov	r0, #4
     434:	e1a01003 	mov	r1, r3
     438:	eb0000a3 	bl	6cc <HEX_write_ASM>
				HEX_write_ASM(HEX3, (s / 10));			// HEX3 displays  10s
     43c:	e51b200c 	ldr	r2, [r11, #-12]
     440:	e3063667 	movw	r3, #26215	; 0x6667
     444:	e3463666 	movt	r3, #26214	; 0x6666
     448:	e0c31293 	smull	r1, r3, r3, r2
     44c:	e1a01143 	asr	r1, r3, #2
     450:	e1a03fc2 	asr	r3, r2, #31
     454:	e0633001 	rsb	r3, r3, r1
     458:	e6ef3073 	uxtb	r3, r3
     45c:	e3a00008 	mov	r0, #8
     460:	e1a01003 	mov	r1, r3
     464:	eb000098 	bl	6cc <HEX_write_ASM>
				HEX_write_ASM(HEX4, (min % 10));		// HEX4 displays  1min
     468:	e51b1010 	ldr	r1, [r11, #-16]
     46c:	e3063667 	movw	r3, #26215	; 0x6667
     470:	e3463666 	movt	r3, #26214	; 0x6666
     474:	e0c32193 	smull	r2, r3, r3, r1
     478:	e1a02143 	asr	r2, r3, #2
     47c:	e1a03fc1 	asr	r3, r1, #31
     480:	e0632002 	rsb	r2, r3, r2
     484:	e1a03002 	mov	r3, r2
     488:	e1a03103 	lsl	r3, r3, #2
     48c:	e0833002 	add	r3, r3, r2
     490:	e1a03083 	lsl	r3, r3, #1
     494:	e0632001 	rsb	r2, r3, r1
     498:	e6ef3072 	uxtb	r3, r2
     49c:	e3a00010 	mov	r0, #16
     4a0:	e1a01003 	mov	r1, r3
     4a4:	eb000088 	bl	6cc <HEX_write_ASM>
				HEX_write_ASM(HEX5, (min / 10));		// HEX5 displays  10min
     4a8:	e51b2010 	ldr	r2, [r11, #-16]
     4ac:	e3063667 	movw	r3, #26215	; 0x6667
     4b0:	e3463666 	movt	r3, #26214	; 0x6666
     4b4:	e0c31293 	smull	r1, r3, r3, r2
     4b8:	e1a01143 	asr	r1, r3, #2
     4bc:	e1a03fc2 	asr	r3, r2, #31
     4c0:	e0633001 	rsb	r3, r3, r1
     4c4:	e6ef3073 	uxtb	r3, r3
     4c8:	e3a00020 	mov	r0, #32
     4cc:	e1a01003 	mov	r1, r3
     4d0:	eb00007d 	bl	6cc <HEX_write_ASM>
			}
			HPS_TIM0_INT_FLAG = 0;		// Put down the timer interrupt flag
     4d4:	e3003a68 	movw	r3, #2664	; 0xa68
     4d8:	e3403000 	movt	r3, #0
     4dc:	e3a02000 	mov	r2, #0
     4e0:	e5832000 	str	r2, [r3]
		}

		// Check for pushbutton interrupts from the pushbuttons on every iteration
		if (PB_INT_FLAG > 0) { 
     4e4:	e3003a78 	movw	r3, #2680	; 0xa78
     4e8:	e3403000 	movt	r3, #0
     4ec:	e5933000 	ldr	r3, [r3]
     4f0:	e3530000 	cmp	r3, #0
     4f4:	daffff7c 	ble	2ec <main+0x90>
			if ((PB_INT_FLAG & 1) && (!enable)) { 				// If PB0 is pressed and the timer is off then start the timer
     4f8:	e3003a78 	movw	r3, #2680	; 0xa78
     4fc:	e3403000 	movt	r3, #0
     500:	e5933000 	ldr	r3, [r3]
     504:	e2033001 	and	r3, r3, #1
     508:	e3530000 	cmp	r3, #0
     50c:	0a000005 	beq	528 <main+0x2cc>
     510:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     514:	e3530000 	cmp	r3, #0
     518:	1a000002 	bne	528 <main+0x2cc>
				enable = 1;
     51c:	e3a03001 	mov	r3, #1
     520:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     524:	ea00001c 	b	59c <main+0x340>
			} else if ((PB_INT_FLAG & 2) && (enable)) { 		// If PB1 is pressed and the timer is on then stop the timer
     528:	e3003a78 	movw	r3, #2680	; 0xa78
     52c:	e3403000 	movt	r3, #0
     530:	e5933000 	ldr	r3, [r3]
     534:	e2033002 	and	r3, r3, #2
     538:	e3530000 	cmp	r3, #0
     53c:	0a000005 	beq	558 <main+0x2fc>
     540:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     544:	e3530000 	cmp	r3, #0
     548:	0a000002 	beq	558 <main+0x2fc>
				enable = 0;
     54c:	e3a03000 	mov	r3, #0
     550:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     554:	ea000010 	b	59c <main+0x340>
			} else if (PB_INT_FLAG & 4) { 						// If PB2 is pressed then reset the timer 
     558:	e3003a78 	movw	r3, #2680	; 0xa78
     55c:	e3403000 	movt	r3, #0
     560:	e5933000 	ldr	r3, [r3]
     564:	e2033004 	and	r3, r3, #4
     568:	e3530000 	cmp	r3, #0
     56c:	0a00000a 	beq	59c <main+0x340>
				ms = 0;
     570:	e3a03000 	mov	r3, #0
     574:	e50b3008 	str	r3, [r11, #-8]
				s = 0;
     578:	e3a03000 	mov	r3, #0
     57c:	e50b300c 	str	r3, [r11, #-12]
				min = 0;
     580:	e3a03000 	mov	r3, #0
     584:	e50b3010 	str	r3, [r11, #-16]
				enable = 0;
     588:	e3a03000 	mov	r3, #0
     58c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
     590:	e3a0003f 	mov	r0, #63	; 0x3f
     594:	e3a01000 	mov	r1, #0
     598:	eb00004b 	bl	6cc <HEX_write_ASM>
			}
			PB_INT_FLAG = 0;			// Put down the pushbutton interrupt flag
     59c:	e3003a78 	movw	r3, #2680	; 0xa78
     5a0:	e3403000 	movt	r3, #0
     5a4:	e3a02000 	mov	r2, #0
     5a8:	e5832000 	str	r2, [r3]
		}
	}
     5ac:	eaffff4e 	b	2ec <main+0x90>

000005b0 <read_LEDs_ASM>:
	.text
	.equ LEDs_BASE, 0xFF200000
	.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LEDs_BASE
     5b0:	e59f1010 	ldr	r1, [pc, #16]	; 5c8 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
     5b4:	e5910000 	ldr	r0, [r1]
	BX LR
     5b8:	e12fff1e 	bx	lr

000005bc <write_LEDs_ASM>:


write_LEDs_ASM: 
	LDR R1, =LEDs_BASE
     5bc:	e59f1004 	ldr	r1, [pc, #4]	; 5c8 <write_LEDs_ASM+0xc>
	STR R0, [R1]
     5c0:	e5810000 	str	r0, [r1]
	BX LR
     5c4:	e12fff1e 	bx	lr
	.text
	.equ LEDs_BASE, 0xFF200000
	.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LEDs_BASE
     5c8:	ff200000 	.word	0xff200000

000005cc <read_slider_switches_ASM>:
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	
	LDR R1, =SW_BASE
     5cc:	e59f1004 	ldr	r1, [pc, #4]	; 5d8 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
     5d0:	e5910000 	ldr	r0, [r1]
	BX LR
     5d4:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	
	LDR R1, =SW_BASE
     5d8:	ff200040 	.word	0xff200040

000005dc <HEX_clear_ASM>:
			.equ HEX0TO3_BASE, 0xFF200020
			.equ HEX4TO5_BASE, 0xFF200030
			.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM

HEX_clear_ASM:
			LDR	R2, =HEX0TO3_BASE		// Load the memory address of HEX0-3 in R2
     5dc:	e59f2284 	ldr	r2, [pc, #644]	; 868 <END+0x4>
			LDR R3, =HEX4TO5_BASE		// Load the memory address of HEX4-5 in R3
     5e0:	e59f3284 	ldr	r3, [pc, #644]	; 86c <END+0x8>
			LDR R4, [R2]				// Load the content into R4
     5e4:	e5924000 	ldr	r4, [r2]
			LDR R5, [R3]				// Load the content into R4
     5e8:	e5935000 	ldr	r5, [r3]

000005ec <CLEAR0>:
					
CLEAR0:		TST R0, #1					// Check the input whther includes HEX0
     5ec:	e3100001 	tst	r0, #1
			BEQ CLEAR1					// If not jump to CLEAR1
     5f0:	0a000000 	beq	5f8 <CLEAR1>
			AND R4, R4, #0xFFFFFF00		// If yes the clear HEX0
     5f4:	e3c440ff 	bic	r4, r4, #255	; 0xff

000005f8 <CLEAR1>:

CLEAR1:  	LSR R0, #1					// Check the input		
     5f8:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX1
     5fc:	e3100001 	tst	r0, #1
			BEQ CLEAR2					// If not jump to CLEAR2
     600:	0a000000 	beq	608 <CLEAR2>
			AND R4, R4, #0xFFFF00FF		// If yes the clear HEX1
     604:	e3c44cff 	bic	r4, r4, #65280	; 0xff00

00000608 <CLEAR2>:

CLEAR2:  	LSR R0, #1					// Check the input				
     608:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX2
     60c:	e3100001 	tst	r0, #1
			BEQ CLEAR3					// If not jump to CLEAR3
     610:	0a000000 	beq	618 <CLEAR3>
			AND R4, R4, #0xFF00FFFF		// If yes the clear HEX2
     614:	e3c448ff 	bic	r4, r4, #16711680	; 0xff0000

00000618 <CLEAR3>:

CLEAR3:  	LSR R0, #1					// Check the input			
     618:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX3
     61c:	e3100001 	tst	r0, #1
			BEQ CLEAR4					// If not jump to CLEAR4
     620:	0a000000 	beq	628 <CLEAR4>
			AND R4, R4, #0x00FFFFFF		// If yes the clear HEX3
     624:	e3c444ff 	bic	r4, r4, #-16777216	; 0xff000000

00000628 <CLEAR4>:

CLEAR4:  	LSR R0, #1					// Check the input			
     628:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX4
     62c:	e3100001 	tst	r0, #1
			BEQ CLEAR5					// If not jump to CLEAR5
     630:	0a000000 	beq	638 <CLEAR5>
			AND R5, R5, #0xFFFFFF00		// If yes the clear HEX4
     634:	e3c550ff 	bic	r5, r5, #255	; 0xff

00000638 <CLEAR5>:

CLEAR5:  	LSR R0, #1					// Check the input
     638:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX5
     63c:	e3100001 	tst	r0, #1
			BEQ CLEAR6					// If not jump to CLEAR6
     640:	0a000000 	beq	648 <CLEAR6>
			AND R5, R5, #0xFFFF00FF		// If yes the clear HEX5
     644:	e3c55cff 	bic	r5, r5, #65280	; 0xff00

00000648 <CLEAR6>:

CLEAR6:  	STR R4, [R2]				// Store R4 into memory
     648:	e5824000 	str	r4, [r2]
			STR R5, [R3]				// Store R5 into memory
     64c:	e5835000 	str	r5, [r3]
			B END
     650:	ea000083 	b	864 <END>

00000654 <HEX_flood_ASM>:

HEX_flood_ASM:
			LDR	R2, =HEX0TO3_BASE		// Load the memory address of HEX0-3 in R2
     654:	e59f220c 	ldr	r2, [pc, #524]	; 868 <END+0x4>
			LDR R3, =HEX4TO5_BASE		// Load the memory address of HEX4-5 in R3
     658:	e59f320c 	ldr	r3, [pc, #524]	; 86c <END+0x8>
			LDR R4, [R2]				// Load the content into R4
     65c:	e5924000 	ldr	r4, [r2]
			LDR R5, [R3]				// Load the content into R4
     660:	e5935000 	ldr	r5, [r3]

00000664 <FLOOD0>:
			
FLOOD0:		TST R0, #1					// Check the input whether includes HEX0
     664:	e3100001 	tst	r0, #1
			BEQ FLOOD1					// If not jump to FLOOD1
     668:	0a000000 	beq	670 <FLOOD1>
			ORR	R4, R4, #0x000000FF     // Update the HEX0 value to be full display
     66c:	e38440ff 	orr	r4, r4, #255	; 0xff

00000670 <FLOOD1>:
	
FLOOD1:		LSR	R0, #1					// Check the input
     670:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX1
     674:	e3100001 	tst	r0, #1
			BEQ FLOOD2					// If not jump to FLOOD
     678:	0a000000 	beq	680 <FLOOD2>
			ORR	R4, R4, #0x0000FF00		// Update the HEX1 value to be full display
     67c:	e3844cff 	orr	r4, r4, #65280	; 0xff00

00000680 <FLOOD2>:
	
FLOOD2:		LSR	R0, #1					// Check the input
     680:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX2
     684:	e3100001 	tst	r0, #1
			BEQ FLOOD3					// If not jump to FLOOD3
     688:	0a000000 	beq	690 <FLOOD3>
			ORR	R4, R4, #0x00FF0000		// Update the HEX2 value to be full display
     68c:	e38448ff 	orr	r4, r4, #16711680	; 0xff0000

00000690 <FLOOD3>:
		
FLOOD3:		LSR	R0, #1					// Check the input
     690:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX3
     694:	e3100001 	tst	r0, #1
			BEQ FLOOD4					// If not jump to FLOOD4
     698:	0a000000 	beq	6a0 <FLOOD4>
			ORR	R4, R4, #0xFF000000		// Update the HEX3 value to be full display
     69c:	e38444ff 	orr	r4, r4, #-16777216	; 0xff000000

000006a0 <FLOOD4>:
		
FLOOD4:		LSR	R0, #1					// Check the input
     6a0:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX4
     6a4:	e3100001 	tst	r0, #1
			BEQ FLOOD5					// If not jump to FLOOD5
     6a8:	0a000000 	beq	6b0 <FLOOD5>
			ORR	R5, R5, #0x000000FF		// Update the HEX4 value to be full display
     6ac:	e38550ff 	orr	r5, r5, #255	; 0xff

000006b0 <FLOOD5>:

FLOOD5:		LSR	R0, #1					// Check the input
     6b0:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// whether includes HEX5
     6b4:	e3100001 	tst	r0, #1
			BEQ FLOOD6					// If not jump to FLOOD6
     6b8:	0a000000 	beq	6c0 <FLOOD6>
			ORR	R5, R5, #0x0000FF00		// Update the HEX5 value to be full display
     6bc:	e3855cff 	orr	r5, r5, #65280	; 0xff00

000006c0 <FLOOD6>:

FLOOD6:		STR R4, [R2]				// Store R4 into memory
     6c0:	e5824000 	str	r4, [r2]
			STR R5, [R3]				// Store R5 into memory
     6c4:	e5835000 	str	r5, [r3]
			B END
     6c8:	ea000065 	b	864 <END>

000006cc <HEX_write_ASM>:

HEX_write_ASM:
CHECKO:		CMP R1, #0					// Check the input value
     6cc:	e3510000 	cmp	r1, #0
			BGT CHECK1					// If it's not 0 jump to CHECK1
     6d0:	ca000001 	bgt	6dc <CHECK1>
			MOV R1, #63					// Set 7-segments to display 0
     6d4:	e3a0103f 	mov	r1, #63	; 0x3f
			B	ST_WRITE
     6d8:	ea000038 	b	7c0 <ST_WRITE>

000006dc <CHECK1>:

CHECK1:		CMP R1, #1					// Check the input value
     6dc:	e3510001 	cmp	r1, #1
			BGT CHECK2					// If it's not 1 jump to CHECK2
     6e0:	ca000001 	bgt	6ec <CHECK2>
			MOV R1, #6					// Set 7-segments to display 1
     6e4:	e3a01006 	mov	r1, #6
			B	ST_WRITE
     6e8:	ea000034 	b	7c0 <ST_WRITE>

000006ec <CHECK2>:

CHECK2:		CMP R1, #2					// Check the input value
     6ec:	e3510002 	cmp	r1, #2
			BGT CHECK3					// If it's not 2 jump to CHECK3
     6f0:	ca000001 	bgt	6fc <CHECK3>
			MOV R1, #91					// Set 7-segments to display 2
     6f4:	e3a0105b 	mov	r1, #91	; 0x5b
			B	ST_WRITE
     6f8:	ea000030 	b	7c0 <ST_WRITE>

000006fc <CHECK3>:

CHECK3:		CMP R1, #3					// Check the input value
     6fc:	e3510003 	cmp	r1, #3
			BGT CHECK4					// If it's not 3 jump to CHECK4
     700:	ca000001 	bgt	70c <CHECK4>
			MOV R1, #79					// Set 7-segments to display 3
     704:	e3a0104f 	mov	r1, #79	; 0x4f
			B	ST_WRITE
     708:	ea00002c 	b	7c0 <ST_WRITE>

0000070c <CHECK4>:

CHECK4:		CMP R1, #4					// Check the input value
     70c:	e3510004 	cmp	r1, #4
			BGT CHECK5					// If it's not 4 jump to CHECK5
     710:	ca000001 	bgt	71c <CHECK5>
			MOV R1, #102				// Set 7-segments to display 4
     714:	e3a01066 	mov	r1, #102	; 0x66
			B	ST_WRITE	
     718:	ea000028 	b	7c0 <ST_WRITE>

0000071c <CHECK5>:

CHECK5:		CMP R1, #5					// Check the input value
     71c:	e3510005 	cmp	r1, #5
			BGT CHECK6					// If it's not 5 jump to CHECK6
     720:	ca000001 	bgt	72c <CHECK6>
			MOV R1, #109				// Set 7-segments to display 5
     724:	e3a0106d 	mov	r1, #109	; 0x6d
			B	ST_WRITE
     728:	ea000024 	b	7c0 <ST_WRITE>

0000072c <CHECK6>:

CHECK6:		CMP R1, #6					// Check the input value
     72c:	e3510006 	cmp	r1, #6
			BGT CHECK7					// If it's not 6 jump to CHECK7
     730:	ca000001 	bgt	73c <CHECK7>
			MOV R1, #125				// Set 7-segments to display 6
     734:	e3a0107d 	mov	r1, #125	; 0x7d
			B	ST_WRITE
     738:	ea000020 	b	7c0 <ST_WRITE>

0000073c <CHECK7>:

CHECK7:		CMP R1, #7					// Check the input value
     73c:	e3510007 	cmp	r1, #7
			BGT CHECK8					// If it's not 7 jump to CHECK8
     740:	ca000001 	bgt	74c <CHECK8>
			MOV R1, #7					// Set 7-segments to display 7
     744:	e3a01007 	mov	r1, #7
			B	ST_WRITE
     748:	ea00001c 	b	7c0 <ST_WRITE>

0000074c <CHECK8>:

CHECK8:		CMP R1, #8					// Check the input value
     74c:	e3510008 	cmp	r1, #8
			BGT CHECK9					// If it's not 8 jump to CHECK9
     750:	ca000001 	bgt	75c <CHECK9>
			MOV R1, #127				// Set 7-segments to display 8
     754:	e3a0107f 	mov	r1, #127	; 0x7f
			B	ST_WRITE
     758:	ea000018 	b	7c0 <ST_WRITE>

0000075c <CHECK9>:

CHECK9:		CMP R1, #9					// Check the input value
     75c:	e3510009 	cmp	r1, #9
			BGT CHECK10					// If it's not 9 jump to CHECK10
     760:	ca000001 	bgt	76c <CHECK10>
			MOV R1, #111				// Set 7-segments to display 9
     764:	e3a0106f 	mov	r1, #111	; 0x6f
			B	ST_WRITE
     768:	ea000014 	b	7c0 <ST_WRITE>

0000076c <CHECK10>:

CHECK10:	CMP R1, #10					// Check the input value
     76c:	e351000a 	cmp	r1, #10
			BGT CHECK11					// If it's not 10 jump to CHECK11
     770:	ca000001 	bgt	77c <CHECK11>
			MOV R1, #119				// Set 7-segments to display 10
     774:	e3a01077 	mov	r1, #119	; 0x77
			B	ST_WRITE
     778:	ea000010 	b	7c0 <ST_WRITE>

0000077c <CHECK11>:

CHECK11:	CMP R1, #11					// Check the input value
     77c:	e351000b 	cmp	r1, #11
			BGT CHECK12					// If it's not 11 jump to CHECK12
     780:	ca000001 	bgt	78c <CHECK12>
			MOV R1, #127				// Set 7-segments to display 11
     784:	e3a0107f 	mov	r1, #127	; 0x7f
			B	ST_WRITE
     788:	ea00000c 	b	7c0 <ST_WRITE>

0000078c <CHECK12>:

CHECK12:	CMP R1, #12					// Check the input value
     78c:	e351000c 	cmp	r1, #12
			BGT CHECK13					// If it's not 12 jump to CHECK13
     790:	ca000001 	bgt	79c <CHECK13>
			MOV R1, #57					// Set 7-segments to display 12
     794:	e3a01039 	mov	r1, #57	; 0x39
			B	ST_WRITE
     798:	ea000008 	b	7c0 <ST_WRITE>

0000079c <CHECK13>:

CHECK13:	CMP R1, #13					// Check the input value
     79c:	e351000d 	cmp	r1, #13
			BGT CHECK14					// If it's not 13 jump to CHECK14
     7a0:	ca000001 	bgt	7ac <CHECK14>
			MOV R1, #63					// Set 7-segments to display 13
     7a4:	e3a0103f 	mov	r1, #63	; 0x3f
			B	ST_WRITE
     7a8:	ea000004 	b	7c0 <ST_WRITE>

000007ac <CHECK14>:

CHECK14:	CMP R1, #14					// Check the input value
     7ac:	e351000e 	cmp	r1, #14
			BGT CHECK15					// If it's not 14 jump to CHECK15
     7b0:	ca000001 	bgt	7bc <CHECK15>
			MOV R1, #121				// Set 7-segments to display 14
     7b4:	e3a01079 	mov	r1, #121	; 0x79
			B	ST_WRITE
     7b8:	ea000000 	b	7c0 <ST_WRITE>

000007bc <CHECK15>:

CHECK15:	MOV R1, #113				// Set 7-segments to display 15
     7bc:	e3a01071 	mov	r1, #113	; 0x71

000007c0 <ST_WRITE>:

ST_WRITE:	LDR	R3, =HEX0TO3_BASE		// Load the memory address of HEX0-3 in R3
     7c0:	e59f30a0 	ldr	r3, [pc, #160]	; 868 <END+0x4>
			LDR R4, =HEX4TO5_BASE		// Load the memory address of HEX4-5 in R4
     7c4:	e59f40a0 	ldr	r4, [pc, #160]	; 86c <END+0x8>
			LDR R7, [R3]				// Load the content into R7
     7c8:	e5937000 	ldr	r7, [r3]
			LDR R8, [R4]				// Load the content into R8
     7cc:	e5948000 	ldr	r8, [r4]
			MOV R5, R1					// Move the value in R1 into R5 for HEX4-5 display
     7d0:	e1a05001 	mov	r5, r1

000007d4 <WRITE0>:
			
WRITE0:		TST R0, #1					// Check the input whether inludes HEX0
     7d4:	e3100001 	tst	r0, #1
			BEQ	WRITE1					// If not jump to WRITE1
     7d8:	0a000001 	beq	7e4 <WRITE1>
			AND R7, R7, #0xFFFFFF00		// Clear the display first
     7dc:	e3c770ff 	bic	r7, r7, #255	; 0xff
			ORR R7, R7, R1				// Write the display with corresponding number
     7e0:	e1877001 	orr	r7, r7, r1

000007e4 <WRITE1>:

WRITE1:		LSR R0, #1					// Shift to next input
     7e4:	e1a000a0 	lsr	r0, r0, #1
			LSL	R1, #8					// Shift the number to next display
     7e8:	e1a01401 	lsl	r1, r1, #8
			TST R0, #1					// Check the input whether inludes HEX1
     7ec:	e3100001 	tst	r0, #1
			BEQ	WRITE2					// If not jump to WRITE2
     7f0:	0a000001 	beq	7fc <WRITE2>
			AND R7, R7, #0xFFFF00FF		// Clear the display first
     7f4:	e3c77cff 	bic	r7, r7, #65280	; 0xff00
			ORR R7, R7, R1				// Write the display with corresponding number
     7f8:	e1877001 	orr	r7, r7, r1

000007fc <WRITE2>:

WRITE2:		LSR R0, #1					// Shift to next input
     7fc:	e1a000a0 	lsr	r0, r0, #1
			LSL	R1, #8					// Shift the number to next display
     800:	e1a01401 	lsl	r1, r1, #8
			TST R0, #1					// Check the input whether inludes HEX2
     804:	e3100001 	tst	r0, #1
			BEQ	WRITE3					// If not jump to WRITE3
     808:	0a000001 	beq	814 <WRITE3>
			AND R7, R7, #0xFF00FFFF		// Clear the display first
     80c:	e3c778ff 	bic	r7, r7, #16711680	; 0xff0000
			ORR R7, R7, R1				// Write the display with corresponding number
     810:	e1877001 	orr	r7, r7, r1

00000814 <WRITE3>:

WRITE3:		LSR R0, #1					// Shift to next input
     814:	e1a000a0 	lsr	r0, r0, #1
			LSL	R1, #8					// Shift the number to next display
     818:	e1a01401 	lsl	r1, r1, #8
			TST R0, #1					// Check the input whether inludes HEX3
     81c:	e3100001 	tst	r0, #1
			BEQ	WRITE4					// If not jump to WRITE4
     820:	0a000001 	beq	82c <WRITE4>
			AND R7, R7, #0x00FFFFFF		// Clear the display first
     824:	e3c774ff 	bic	r7, r7, #-16777216	; 0xff000000
			ORR R7, R7, R1				// Write the display with corresponding number
     828:	e1877001 	orr	r7, r7, r1

0000082c <WRITE4>:

WRITE4:		LSR R0, #1					// Shift to next input
     82c:	e1a000a0 	lsr	r0, r0, #1
			TST R0, #1					// Check the input whether inludes HEX4
     830:	e3100001 	tst	r0, #1
			BEQ	WRITE5					// If not jump to WRITE5
     834:	0a000001 	beq	840 <WRITE5>
			AND R8, R8, #0xFFFFFF00		// Clear the display first
     838:	e3c880ff 	bic	r8, r8, #255	; 0xff
			ORR R8, R8, R5				// Write the display with corresponding number
     83c:	e1888005 	orr	r8, r8, r5

00000840 <WRITE5>:

WRITE5:		LSR R0, #1					// Shift to next input
     840:	e1a000a0 	lsr	r0, r0, #1
			LSL	R5, #8					// Shift the number to next display
     844:	e1a05405 	lsl	r5, r5, #8
			TST R0, #1					// Check the input whether inludes HEX5
     848:	e3100001 	tst	r0, #1
			BEQ	WRITE6					// If not jump to WRITE6
     84c:	0a000001 	beq	858 <WRITE6>
			AND R8, R8, #0xFFFF00FF		// Clear the display first
     850:	e3c88cff 	bic	r8, r8, #65280	; 0xff00
			ORR R8, R8, R5				// Write the display with corresponding number
     854:	e1888005 	orr	r8, r8, r5

00000858 <WRITE6>:

WRITE6:		STR R7, [R3]				// Store R7 into memory
     858:	e5837000 	str	r7, [r3]
			STR R8, [R4]				// Store R8 into memory
     85c:	e5848000 	str	r8, [r4]
			B END							
     860:	eaffffff 	b	864 <END>

00000864 <END>:

END:
			BX LR						// Return to main
     864:	e12fff1e 	bx	lr
			.equ HEX0TO3_BASE, 0xFF200020
			.equ HEX4TO5_BASE, 0xFF200030
			.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM

HEX_clear_ASM:
			LDR	R2, =HEX0TO3_BASE		// Load the memory address of HEX0-3 in R2
     868:	ff200020 	.word	0xff200020
			LDR R3, =HEX4TO5_BASE		// Load the memory address of HEX4-5 in R3
     86c:	ff200030 	.word	0xff200030

00000870 <read_PB_data_ASM>:
			.global disable_PB_INT_ASM


read_PB_data_ASM:					
			
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
     870:	e59f1058 	ldr	r1, [pc, #88]	; 8d0 <disable_PB_INT_ASM+0x10>
			LDR R0, [R1]			// Get the content stored in the memory address and put it into R0
     874:	e5910000 	ldr	r0, [r1]
			BX LR					
     878:	e12fff1e 	bx	lr

0000087c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:			
	
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
     87c:	e59f104c 	ldr	r1, [pc, #76]	; 8d0 <disable_PB_INT_ASM+0x10>
			LDR R1, [R1]			// Get the content stored in the memory address and put it into R1
     880:	e5911000 	ldr	r1, [r1]
			AND R0, R1, R0			// Check wehther the input stream matches the string in memory
     884:	e0010000 	and	r0, r1, r0
			BX LR 					
     888:	e12fff1e 	bx	lr

0000088c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				
	
			LDR R0, =PUSH_EDGE		// Load the memory address of PUSH_edge into R0
     88c:	e59f0040 	ldr	r0, [pc, #64]	; 8d4 <disable_PB_INT_ASM+0x14>
			LDR R0, [R0]			// Get the content stored in the memory address and put it into R0	
     890:	e5900000 	ldr	r0, [r0]
			BX LR 	
     894:	e12fff1e 	bx	lr

00000898 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:		

			LDR R1, =PUSH_EDGE		// Load the memory address of PUSH_DATA into R1
     898:	e59f1034 	ldr	r1, [pc, #52]	; 8d4 <disable_PB_INT_ASM+0x14>
			LDR R1, [R1]			// Get the content stored oin the memory address and put it into R1
     89c:	e5911000 	ldr	r1, [r1]
			AND R0, R1, R0			// Check wehther the input string matches the string in memory
     8a0:	e0010000 	and	r0, r1, r0
			BX LR 				
     8a4:	e12fff1e 	bx	lr

000008a8 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:			
									
			LDR R1, =PUSH_EDGE		// Load the memory address of PUSH_EDGE into R1
     8a8:	e59f1024 	ldr	r1, [pc, #36]	; 8d4 <disable_PB_INT_ASM+0x14>
			STR R0, [R1]			// Store the content of input variable into R0
     8ac:	e5810000 	str	r0, [r1]
			BX LR 					
     8b0:	e12fff1e 	bx	lr

000008b4 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:		

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
     8b4:	e59f101c 	ldr	r1, [pc, #28]	; 8d8 <disable_PB_INT_ASM+0x18>
			STR R0, [R1]			// Store the content of input variable into R0
     8b8:	e5810000 	str	r0, [r1]
			BX LR 					
     8bc:	e12fff1e 	bx	lr

000008c0 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:			

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
     8c0:	e59f1010 	ldr	r1, [pc, #16]	; 8d8 <disable_PB_INT_ASM+0x18>
			MVN R0, R0				// Invert the imput string
     8c4:	e1e00000 	mvn	r0, r0
			STR R0, [R1]			// Store the content of input variable into R0
     8c8:	e5810000 	str	r0, [r1]
			BX LR 				
     8cc:	e12fff1e 	bx	lr
			.global disable_PB_INT_ASM


read_PB_data_ASM:					
			
			LDR R1, =PUSH_DATA		// Load the memory address of PUSH_DATA into R1
     8d0:	ff200050 	.word	0xff200050
			AND R0, R1, R0			// Check wehther the input stream matches the string in memory
			BX LR 					

read_PB_edgecap_ASM:				
	
			LDR R0, =PUSH_EDGE		// Load the memory address of PUSH_edge into R0
     8d4:	ff20005c 	.word	0xff20005c
			STR R0, [R1]			// Store the content of input variable into R0
			BX LR 					

enable_PB_INT_ASM:		

			LDR R1, =PUSH_MASK		// Load the memory address of PUSH_MASK into R1
     8d8:	ff200058 	.word	0xff200058

000008dc <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     8dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     8e0:	e3a01000 	mov	r1, #0
	MOV R2, #1
     8e4:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     8e8:	e5907000 	ldr	r7, [r0]
	B LOOP
     8ec:	eaffffff 	b	8f0 <LOOP>

000008f0 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     8f0:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     8f4:	0a000000 	beq	8fc <CONTINUE>
	BL CONFIG
     8f8:	eb000004 	bl	910 <CONFIG>

000008fc <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     8fc:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     900:	e3510004 	cmp	r1, #4
	BLT LOOP
     904:	bafffff9 	blt	8f0 <LOOP>

00000908 <DONE>:

DONE:
	POP {R4-R7, LR}
     908:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     90c:	e12fff1e 	bx	lr

00000910 <CONFIG>:


CONFIG:
	PUSH {LR}
     910:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     914:	e59f3148 	ldr	r3, [pc, #328]	; a64 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     918:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     91c:	eb000005 	bl	938 <DISABLE>
	BL SET_LOAD_VAL
     920:	eb000008 	bl	948 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     924:	eb00000e 	bl	964 <SET_LOAD_BIT>
	BL SET_INT_BIT
     928:	eb000013 	bl	97c <SET_INT_BIT>
	BL SET_EN_BIT
     92c:	eb000019 	bl	998 <SET_EN_BIT>
	
	POP {LR}
     930:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     934:	e12fff1e 	bx	lr

00000938 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     938:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     93c:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     940:	e5845008 	str	r5, [r4, #8]
	BX LR
     944:	e12fff1e 	bx	lr

00000948 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     948:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     94c:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     950:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     954:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     958:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     95c:	e5845000 	str	r5, [r4]
	BX LR
     960:	e12fff1e 	bx	lr

00000964 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     964:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     968:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     96c:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     970:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     974:	e5845008 	str	r5, [r4, #8]
	BX LR
     978:	e12fff1e 	bx	lr

0000097c <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     97c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     980:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     984:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     988:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     98c:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     990:	e5845008 	str	r5, [r4, #8]
	BX LR
     994:	e12fff1e 	bx	lr

00000998 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     998:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     99c:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     9a0:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     9a4:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     9a8:	e5845008 	str	r5, [r4, #8]
	BX LR
     9ac:	e12fff1e 	bx	lr

000009b0 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     9b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     9b4:	e3a01000 	mov	r1, #0
	MOV R2, #1
     9b8:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     9bc:	eaffffff 	b	9c0 <CLEAR_INT_LOOP>

000009c0 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     9c0:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     9c4:	0a000000 	beq	9cc <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     9c8:	eb000005 	bl	9e4 <CLEAR_INT>

000009cc <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     9cc:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     9d0:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     9d4:	bafffff9 	blt	9c0 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     9d8:	eaffffff 	b	9dc <CLEAR_INT_DONE>

000009dc <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     9dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     9e0:	e12fff1e 	bx	lr

000009e4 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     9e4:	e59f3078 	ldr	r3, [pc, #120]	; a64 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     9e8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     9ec:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     9f0:	e12fff1e 	bx	lr

000009f4 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     9f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     9f8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     9fc:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a00:	e3a02001 	mov	r2, #1
	MOV R4, #0
     a04:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     a08:	eaffffff 	b	a0c <READ_INT_LOOP>

00000a0c <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     a0c:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     a10:	0a000000 	beq	a18 <READ_INT_CONTINUE>
	BL READ_INT
     a14:	eb000008 	bl	a3c <READ_INT>

00000a18 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     a18:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     a1c:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     a20:	0a000001 	beq	a2c <READ_INT_DONE>
	LSL R4, R4, #1
     a24:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     a28:	eafffff7 	b	a0c <READ_INT_LOOP>

00000a2c <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     a2c:	e1a00004 	mov	r0, r4
	POP {R4}
     a30:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     a34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a38:	e12fff1e 	bx	lr

00000a3c <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     a3c:	e59f3020 	ldr	r3, [pc, #32]	; a64 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     a40:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     a44:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     a48:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     a4c:	e0244003 	eor	r4, r4, r3
	BX LR
     a50:	e12fff1e 	bx	lr

00000a54 <HPS_TIM_BASE>:
     a54:	ffc08000 	.word	0xffc08000
     a58:	ffc09000 	.word	0xffc09000
     a5c:	ffd00000 	.word	0xffd00000
     a60:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     a64:	00000a54 	.word	0x00000a54

00000a68 <HPS_TIM0_INT_FLAG>:
     a68:	00000000 	.word	0x00000000

00000a6c <HPS_TIM1_INT_FLAG>:
     a6c:	00000000 	.word	0x00000000

00000a70 <HPS_TIM2_INT_FLAG>:
     a70:	00000000 	.word	0x00000000

00000a74 <HPS_TIM3_INT_FLAG>:
     a74:	00000000 	.word	0x00000000

00000a78 <PB_INT_FLAG>:
     a78:	00000000 	.word	0x00000000

00000a7c <A9_PRIV_TIM_ISR>:

PB_INT_FLAG:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     a7c:	e12fff1e 	bx	lr

00000a80 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     a80:	e12fff1e 	bx	lr

00000a84 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	
	PUSH {LR}							// Push LR to stack
     a84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0x1						// Set R0 to be 0001
     a88:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM			// Clear Timer0
     a8c:	ebffffc7 	bl	9b0 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =HPS_TIM0_INT_FLAG			// Load the address of HPS_TIM0_INT_FLAG into R0
     a90:	e59f00a8 	ldr	r0, [pc, #168]	; b40 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1							// Load a 1 into R1
     a94:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// Store R1 into RO
     a98:	e5801000 	str	r1, [r0]
	POP {LR}							// POP LR from stack
     a9c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

	BX LR
     aa0:	e12fff1e 	bx	lr

00000aa4 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	
	PUSH {LR}							// Push LR to stack
     aa4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0x2						// Set R0 to be 00010
     aa8:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM			// Clear Timer1
     aac:	ebffffbf 	bl	9b0 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =HPS_TIM1_INT_FLAG			// Load the address of HPS_TIM1_INT_FLAG into R0
     ab0:	e59f008c 	ldr	r0, [pc, #140]	; b44 <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1							// Load a 1 into R1
     ab4:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// Store R1 into RO
     ab8:	e5801000 	str	r1, [r0]
	POP {LR}							// POP LR from stack
     abc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

	BX LR
     ac0:	e12fff1e 	bx	lr

00000ac4 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	
	PUSH {LR}							// Push LR to stack
     ac4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0x4						// Set R0 to be 0100
     ac8:	e3a00004 	mov	r0, #4
	BL HPS_TIM_clear_INT_ASM			// Clear Timer2
     acc:	ebffffb7 	bl	9b0 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =HPS_TIM2_INT_FLAG			// Load the address of HPS_TIM2_INT_FLAG into R0
     ad0:	e59f0070 	ldr	r0, [pc, #112]	; b48 <FPGA_PS2_DUAL_ISR+0xc>
	MOV R1, #1							// Load a 1 into R1
     ad4:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// Store R1 into RO
     ad8:	e5801000 	str	r1, [r0]
	POP {LR}							// POP LR from stack
     adc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

	BX LR
     ae0:	e12fff1e 	bx	lr

00000ae4 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	PUSH {LR}							// Push LR to stack
     ae4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0x8						// Set R0 to be 1000
     ae8:	e3a00008 	mov	r0, #8
	BL HPS_TIM_clear_INT_ASM			// Clear Timer3
     aec:	ebffffaf 	bl	9b0 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =HPS_TIM3_INT_FLAG			// Load the address of HPS_TIM3_INT_FLAG into R0
     af0:	e59f0054 	ldr	r0, [pc, #84]	; b4c <FPGA_PS2_DUAL_ISR+0x10>
	MOV R1, #1							// Load a 1 into R1
     af4:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// Store R1 into RO
     af8:	e5801000 	str	r1, [r0]
	POP {LR}							// POP LR from stack
     afc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

	BX LR
     b00:	e12fff1e 	bx	lr

00000b04 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     b04:	e12fff1e 	bx	lr

00000b08 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}							// Push LR to stack
     b08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	BL read_PB_edgecap_ASM				// Read the button that has been pushed
     b0c:	ebffff5e 	bl	88c <read_PB_edgecap_ASM>
	LDR R1, =PB_INT_FLAG				// Load address of PB_INT_FLAG into R1
     b10:	e59f1038 	ldr	r1, [pc, #56]	; b50 <FPGA_PS2_DUAL_ISR+0x14>

	STR R0, [R1]						// Store the value in R1 into R0
     b14:	e5810000 	str	r0, [r1]
	
	BL PB_clear_edgecap_ASM				// Clear edgecap to reset the interrupt
     b18:	ebffff62 	bl	8a8 <PB_clear_edgecap_ASM>
	
	POP {LR}							// POP LR from stack
     b1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b20:	e12fff1e 	bx	lr

00000b24 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     b24:	e12fff1e 	bx	lr

00000b28 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     b28:	e12fff1e 	bx	lr

00000b2c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     b2c:	e12fff1e 	bx	lr

00000b30 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     b30:	e12fff1e 	bx	lr

00000b34 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     b34:	e12fff1e 	bx	lr

00000b38 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     b38:	e12fff1e 	bx	lr

00000b3c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     b3c:	e12fff1e 	bx	lr
	
	PUSH {LR}							// Push LR to stack
	MOV R0, #0x1						// Set R0 to be 0001
	BL HPS_TIM_clear_INT_ASM			// Clear Timer0
	
	LDR R0, =HPS_TIM0_INT_FLAG			// Load the address of HPS_TIM0_INT_FLAG into R0
     b40:	00000a68 	.word	0x00000a68
	
	PUSH {LR}							// Push LR to stack
	MOV R0, #0x2						// Set R0 to be 00010
	BL HPS_TIM_clear_INT_ASM			// Clear Timer1
	
	LDR R0, =HPS_TIM1_INT_FLAG			// Load the address of HPS_TIM1_INT_FLAG into R0
     b44:	00000a6c 	.word	0x00000a6c
	
	PUSH {LR}							// Push LR to stack
	MOV R0, #0x4						// Set R0 to be 0100
	BL HPS_TIM_clear_INT_ASM			// Clear Timer2
	
	LDR R0, =HPS_TIM2_INT_FLAG			// Load the address of HPS_TIM2_INT_FLAG into R0
     b48:	00000a70 	.word	0x00000a70
HPS_TIM3_ISR:
	PUSH {LR}							// Push LR to stack
	MOV R0, #0x8						// Set R0 to be 1000
	BL HPS_TIM_clear_INT_ASM			// Clear Timer3
	
	LDR R0, =HPS_TIM3_INT_FLAG			// Load the address of HPS_TIM3_INT_FLAG into R0
     b4c:	00000a74 	.word	0x00000a74
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}							// Push LR to stack

	BL read_PB_edgecap_ASM				// Read the button that has been pushed
	LDR R1, =PB_INT_FLAG				// Load address of PB_INT_FLAG into R1
     b50:	00000a78 	.word	0x00000a78

00000b54 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     b54:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b58:	e28db000 	add	r11, sp, #0
     b5c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     b60:	e3a030d3 	mov	r3, #211	; 0xd3
     b64:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b68:	e51b3008 	ldr	r3, [r11, #-8]
     b6c:	e129f003 	msr	CPSR_fc, r3
}
     b70:	e28bd000 	add	sp, r11, #0
     b74:	e8bd0800 	ldmfd	sp!, {r11}
     b78:	e12fff1e 	bx	lr

00000b7c <enable_A9_interrupts>:

void enable_A9_interrupts() {
     b7c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b80:	e28db000 	add	r11, sp, #0
     b84:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     b88:	e3a03053 	mov	r3, #83	; 0x53
     b8c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b90:	e51b3008 	ldr	r3, [r11, #-8]
     b94:	e129f003 	msr	CPSR_fc, r3
}
     b98:	e28bd000 	add	sp, r11, #0
     b9c:	e8bd0800 	ldmfd	sp!, {r11}
     ba0:	e12fff1e 	bx	lr

00000ba4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     ba4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ba8:	e28db000 	add	r11, sp, #0
     bac:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     bb0:	e3e03007 	mvn	r3, #7
     bb4:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     bb8:	e3a030d2 	mov	r3, #210	; 0xd2
     bbc:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     bc0:	e51b300c 	ldr	r3, [r11, #-12]
     bc4:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     bc8:	e51b3008 	ldr	r3, [r11, #-8]
     bcc:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     bd0:	e3a030d3 	mov	r3, #211	; 0xd3
     bd4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     bd8:	e51b300c 	ldr	r3, [r11, #-12]
     bdc:	e129f003 	msr	CPSR_fc, r3
}
     be0:	e28bd000 	add	sp, r11, #0
     be4:	e8bd0800 	ldmfd	sp!, {r11}
     be8:	e12fff1e 	bx	lr

00000bec <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     bec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bf0:	e28db000 	add	r11, sp, #0
     bf4:	e24dd01c 	sub	sp, sp, #28
     bf8:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     bfc:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     c00:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c04:	e1a031c3 	asr	r3, r3, #3
     c08:	e3c33003 	bic	r3, r3, #3
     c0c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     c10:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c14:	e203301f 	and	r3, r3, #31
     c18:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     c1c:	e3a02001 	mov	r2, #1
     c20:	e51b300c 	ldr	r3, [r11, #-12]
     c24:	e1a03312 	lsl	r3, r2, r3
     c28:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     c2c:	e51b3008 	ldr	r3, [r11, #-8]
     c30:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     c34:	e2433c03 	sub	r3, r3, #768	; 0x300
     c38:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     c3c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c40:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     c44:	e5921000 	ldr	r1, [r2]
     c48:	e51b2010 	ldr	r2, [r11, #-16]
     c4c:	e1812002 	orr	r2, r1, r2
     c50:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     c54:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c58:	e3c33003 	bic	r3, r3, #3
     c5c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     c60:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c64:	e2033003 	and	r3, r3, #3
     c68:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     c6c:	e51b2008 	ldr	r2, [r11, #-8]
     c70:	e51b300c 	ldr	r3, [r11, #-12]
     c74:	e0823003 	add	r3, r2, r3
     c78:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     c7c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     c80:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c84:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     c88:	e6ef2072 	uxtb	r2, r2
     c8c:	e5c32000 	strb	r2, [r3]
}
     c90:	e28bd000 	add	sp, r11, #0
     c94:	e8bd0800 	ldmfd	sp!, {r11}
     c98:	e12fff1e 	bx	lr

00000c9c <config_GIC>:

void config_GIC(int len, int* IDs) {
     c9c:	e92d4800 	push	{r11, lr}
     ca0:	e28db004 	add	r11, sp, #4
     ca4:	e24dd010 	sub	sp, sp, #16
     ca8:	e50b0010 	str	r0, [r11, #-16]
     cac:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     cb0:	e3a03000 	mov	r3, #0
     cb4:	e50b3008 	str	r3, [r11, #-8]
     cb8:	ea00000a 	b	ce8 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     cbc:	e51b3008 	ldr	r3, [r11, #-8]
     cc0:	e1a03103 	lsl	r3, r3, #2
     cc4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     cc8:	e0823003 	add	r3, r2, r3
     ccc:	e5933000 	ldr	r3, [r3]
     cd0:	e1a00003 	mov	r0, r3
     cd4:	e3a01001 	mov	r1, #1
     cd8:	ebffffc3 	bl	bec <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     cdc:	e51b3008 	ldr	r3, [r11, #-8]
     ce0:	e2833001 	add	r3, r3, #1
     ce4:	e50b3008 	str	r3, [r11, #-8]
     ce8:	e51b2008 	ldr	r2, [r11, #-8]
     cec:	e51b3010 	ldr	r3, [r11, #-16]
     cf0:	e1520003 	cmp	r2, r3
     cf4:	bafffff0 	blt	cbc <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     cf8:	e30c3104 	movw	r3, #49412	; 0xc104
     cfc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d00:	e30f2fff 	movw	r2, #65535	; 0xffff
     d04:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     d08:	e3a03cc1 	mov	r3, #49408	; 0xc100
     d0c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d10:	e3a02001 	mov	r2, #1
     d14:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     d18:	e3a03a0d 	mov	r3, #53248	; 0xd000
     d1c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d20:	e3a02001 	mov	r2, #1
     d24:	e5832000 	str	r2, [r3]
}
     d28:	e24bd004 	sub	sp, r11, #4
     d2c:	e8bd8800 	pop	{r11, pc}

00000d30 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     d30:	e24ee004 	sub	lr, lr, #4
     d34:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     d38:	e28db018 	add	r11, sp, #24
     d3c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     d40:	e30c310c 	movw	r3, #49420	; 0xc10c
     d44:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d48:	e5933000 	ldr	r3, [r3]
     d4c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     d50:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     d54:	e3530053 	cmp	r3, #83	; 0x53
     d58:	0a00003d 	beq	e54 <__cs3_isr_irq+0x124>
     d5c:	e3530053 	cmp	r3, #83	; 0x53
     d60:	ca000011 	bgt	dac <__cs3_isr_irq+0x7c>
     d64:	e353004e 	cmp	r3, #78	; 0x4e
     d68:	0a000031 	beq	e34 <__cs3_isr_irq+0x104>
     d6c:	e353004e 	cmp	r3, #78	; 0x4e
     d70:	ca000006 	bgt	d90 <__cs3_isr_irq+0x60>
     d74:	e3530048 	cmp	r3, #72	; 0x48
     d78:	0a000029 	beq	e24 <__cs3_isr_irq+0xf4>
     d7c:	e3530049 	cmp	r3, #73	; 0x49
     d80:	0a000029 	beq	e2c <__cs3_isr_irq+0xfc>
     d84:	e353001d 	cmp	r3, #29
     d88:	0a000019 	beq	df4 <__cs3_isr_irq+0xc4>
     d8c:	ea000036 	b	e6c <__cs3_isr_irq+0x13c>
     d90:	e3530050 	cmp	r3, #80	; 0x50
     d94:	0a00002a 	beq	e44 <__cs3_isr_irq+0x114>
     d98:	e3530050 	cmp	r3, #80	; 0x50
     d9c:	ba000026 	blt	e3c <__cs3_isr_irq+0x10c>
     da0:	e3530051 	cmp	r3, #81	; 0x51
     da4:	0a000028 	beq	e4c <__cs3_isr_irq+0x11c>
     da8:	ea00002f 	b	e6c <__cs3_isr_irq+0x13c>
     dac:	e35300c7 	cmp	r3, #199	; 0xc7
     db0:	0a000013 	beq	e04 <__cs3_isr_irq+0xd4>
     db4:	e35300c7 	cmp	r3, #199	; 0xc7
     db8:	ca000006 	bgt	dd8 <__cs3_isr_irq+0xa8>
     dbc:	e3530059 	cmp	r3, #89	; 0x59
     dc0:	0a000027 	beq	e64 <__cs3_isr_irq+0x134>
     dc4:	e35300c5 	cmp	r3, #197	; 0xc5
     dc8:	0a00000b 	beq	dfc <__cs3_isr_irq+0xcc>
     dcc:	e3530054 	cmp	r3, #84	; 0x54
     dd0:	0a000021 	beq	e5c <__cs3_isr_irq+0x12c>
     dd4:	ea000024 	b	e6c <__cs3_isr_irq+0x13c>
     dd8:	e35300c9 	cmp	r3, #201	; 0xc9
     ddc:	0a00000c 	beq	e14 <__cs3_isr_irq+0xe4>
     de0:	e35300c9 	cmp	r3, #201	; 0xc9
     de4:	ba000008 	blt	e0c <__cs3_isr_irq+0xdc>
     de8:	e35300ca 	cmp	r3, #202	; 0xca
     dec:	0a00000a 	beq	e1c <__cs3_isr_irq+0xec>
     df0:	ea00001d 	b	e6c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     df4:	ebffff20 	bl	a7c <A9_PRIV_TIM_ISR>
     df8:	ea00001c 	b	e70 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     dfc:	ebffff1f 	bl	a80 <HPS_GPIO1_ISR>
     e00:	ea00001a 	b	e70 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     e04:	ebffff1e 	bl	a84 <HPS_TIM0_ISR>
     e08:	ea000018 	b	e70 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     e0c:	ebffff24 	bl	aa4 <HPS_TIM1_ISR>
     e10:	ea000016 	b	e70 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     e14:	ebffff2a 	bl	ac4 <HPS_TIM2_ISR>
     e18:	ea000014 	b	e70 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     e1c:	ebffff30 	bl	ae4 <HPS_TIM3_ISR>
     e20:	ea000012 	b	e70 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     e24:	ebffff36 	bl	b04 <FPGA_INTERVAL_TIM_ISR>
     e28:	ea000010 	b	e70 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     e2c:	ebffff35 	bl	b08 <FPGA_PB_KEYS_ISR>
     e30:	ea00000e 	b	e70 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     e34:	ebffff3a 	bl	b24 <FPGA_Audio_ISR>
     e38:	ea00000c 	b	e70 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     e3c:	ebffff39 	bl	b28 <FPGA_PS2_ISR>
     e40:	ea00000a 	b	e70 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     e44:	ebffff38 	bl	b2c <FPGA_JTAG_ISR>
     e48:	ea000008 	b	e70 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     e4c:	ebffff37 	bl	b30 <FPGA_IrDA_ISR>
     e50:	ea000006 	b	e70 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     e54:	ebffff36 	bl	b34 <FPGA_JP1_ISR>
     e58:	ea000004 	b	e70 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     e5c:	ebffff35 	bl	b38 <FPGA_JP2_ISR>
     e60:	ea000002 	b	e70 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     e64:	ebffff34 	bl	b3c <FPGA_PS2_DUAL_ISR>
     e68:	ea000000 	b	e70 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     e6c:	eafffffe 	b	e6c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     e70:	e30c3110 	movw	r3, #49424	; 0xc110
     e74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e78:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     e7c:	e5832000 	str	r2, [r3]
}
     e80:	e24bd018 	sub	sp, r11, #24
     e84:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000e88 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     e88:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e8c:	e28db000 	add	r11, sp, #0
	while(1);
     e90:	eafffffe 	b	e90 <__cs3_reset+0x8>

00000e94 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     e94:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e98:	e28db000 	add	r11, sp, #0
	while(1);
     e9c:	eafffffe 	b	e9c <__cs3_isr_undef+0x8>

00000ea0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     ea0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ea4:	e28db000 	add	r11, sp, #0
	while(1);
     ea8:	eafffffe 	b	ea8 <__cs3_isr_swi+0x8>

00000eac <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     eac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     eb0:	e28db000 	add	r11, sp, #0
	while(1);
     eb4:	eafffffe 	b	eb4 <__cs3_isr_pabort+0x8>

00000eb8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     eb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ebc:	e28db000 	add	r11, sp, #0
	while(1);
     ec0:	eafffffe 	b	ec0 <__cs3_isr_dabort+0x8>

00000ec4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     ec4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ec8:	e28db000 	add	r11, sp, #0
	while(1);
     ecc:	eafffffe 	b	ecc <__cs3_isr_fiq+0x8>

00000ed0 <fix_bug>:
}

void fix_bug() {
     ed0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ed4:	e28db000 	add	r11, sp, #0
     ed8:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     edc:	e30d3198 	movw	r3, #53656	; 0xd198
     ee0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ee4:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     ee8:	e51b3008 	ldr	r3, [r11, #-8]
     eec:	e3a02703 	mov	r2, #786432	; 0xc0000
     ef0:	e5832000 	str	r2, [r3]
}
     ef4:	e28bd000 	add	sp, r11, #0
     ef8:	e8bd0800 	ldmfd	sp!, {r11}
     efc:	e12fff1e 	bx	lr

00000f00 <int_setup>:

void int_setup(int len, int* IDs) {
     f00:	e92d4800 	push	{r11, lr}
     f04:	e28db004 	add	r11, sp, #4
     f08:	e24dd008 	sub	sp, sp, #8
     f0c:	e50b0008 	str	r0, [r11, #-8]
     f10:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     f14:	ebffff0e 	bl	b54 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     f18:	ebffff21 	bl	ba4 <set_A9_IRQ_stack>
	fix_bug();
     f1c:	ebffffeb 	bl	ed0 <fix_bug>
	config_GIC(len, IDs);
     f20:	e51b0008 	ldr	r0, [r11, #-8]
     f24:	e51b100c 	ldr	r1, [r11, #-12]
     f28:	ebffff5b 	bl	c9c <config_GIC>
	enable_A9_interrupts();
     f2c:	ebffff12 	bl	b7c <enable_A9_interrupts>
}
     f30:	e24bd004 	sub	sp, r11, #4
     f34:	e8bd8800 	pop	{r11, pc}

00000f38 <atexit>:
     f38:	e1a01000 	mov	r1, r0
     f3c:	e3a00000 	mov	r0, #0
     f40:	e92d4008 	push	{r3, lr}
     f44:	e1a02000 	mov	r2, r0
     f48:	e1a03000 	mov	r3, r0
     f4c:	eb00000e 	bl	f8c <__register_exitproc>
     f50:	e8bd4008 	pop	{r3, lr}
     f54:	e12fff1e 	bx	lr

00000f58 <exit>:
     f58:	e92d4008 	push	{r3, lr}
     f5c:	e3a01000 	mov	r1, #0
     f60:	e1a04000 	mov	r4, r0
     f64:	eb000045 	bl	1080 <__call_exitprocs>
     f68:	e59f3018 	ldr	r3, [pc, #24]	; f88 <exit+0x30>
     f6c:	e5930000 	ldr	r0, [r3]
     f70:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     f74:	e3530000 	cmp	r3, #0
     f78:	11a0e00f 	movne	lr, pc
     f7c:	112fff13 	bxne	r3
     f80:	e1a00004 	mov	r0, r4
     f84:	eb0000c9 	bl	12b0 <_exit>
     f88:	00001360 	.word	0x00001360

00000f8c <__register_exitproc>:
     f8c:	e59fc0e4 	ldr	r12, [pc, #228]	; 1078 <__register_exitproc+0xec>
     f90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     f94:	e59c4000 	ldr	r4, [r12]
     f98:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     f9c:	e35c0000 	cmp	r12, #0
     fa0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     fa4:	e59c5004 	ldr	r5, [r12, #4]
     fa8:	0584c148 	streq	r12, [r4, #328]	; 0x148
     fac:	e355001f 	cmp	r5, #31
     fb0:	e24dd010 	sub	sp, sp, #16
     fb4:	e1a06000 	mov	r6, r0
     fb8:	da000015 	ble	1014 <__register_exitproc+0x88>
     fbc:	e59f00b8 	ldr	r0, [pc, #184]	; 107c <__register_exitproc+0xf0>
     fc0:	e3500000 	cmp	r0, #0
     fc4:	1a000001 	bne	fd0 <__register_exitproc+0x44>
     fc8:	e3e00000 	mvn	r0, #0
     fcc:	ea000018 	b	1034 <__register_exitproc+0xa8>
     fd0:	e3a00e19 	mov	r0, #400	; 0x190
     fd4:	e58d100c 	str	r1, [sp, #12]
     fd8:	e58d2008 	str	r2, [sp, #8]
     fdc:	e58d3004 	str	r3, [sp, #4]
     fe0:	e320f000 	nop	{0}
     fe4:	e250c000 	subs	r12, r0, #0
     fe8:	e59d100c 	ldr	r1, [sp, #12]
     fec:	e59d2008 	ldr	r2, [sp, #8]
     ff0:	e59d3004 	ldr	r3, [sp, #4]
     ff4:	0afffff3 	beq	fc8 <__register_exitproc+0x3c>
     ff8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     ffc:	e3a00000 	mov	r0, #0
    1000:	e58c0004 	str	r0, [r12, #4]
    1004:	e58c5000 	str	r5, [r12]
    1008:	e584c148 	str	r12, [r4, #328]	; 0x148
    100c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1010:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1014:	e3560000 	cmp	r6, #0
    1018:	e59c4004 	ldr	r4, [r12, #4]
    101c:	1a000007 	bne	1040 <__register_exitproc+0xb4>
    1020:	e2843002 	add	r3, r4, #2
    1024:	e2844001 	add	r4, r4, #1
    1028:	e78c1103 	str	r1, [r12, r3, lsl #2]
    102c:	e58c4004 	str	r4, [r12, #4]
    1030:	e3a00000 	mov	r0, #0
    1034:	e28dd010 	add	sp, sp, #16
    1038:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    103c:	e12fff1e 	bx	lr
    1040:	e3a00001 	mov	r0, #1
    1044:	e1a00410 	lsl	r0, r0, r4
    1048:	e08c8104 	add	r8, r12, r4, lsl #2
    104c:	e3560002 	cmp	r6, #2
    1050:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1054:	e5883108 	str	r3, [r8, #264]	; 0x108
    1058:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    105c:	e1877000 	orr	r7, r7, r0
    1060:	01830000 	orreq	r0, r3, r0
    1064:	e1a05008 	mov	r5, r8
    1068:	e5882088 	str	r2, [r8, #136]	; 0x88
    106c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1070:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1074:	eaffffe9 	b	1020 <__register_exitproc+0x94>
    1078:	00001360 	.word	0x00001360
    107c:	00000000 	.word	0x00000000

00001080 <__call_exitprocs>:
    1080:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1084:	e59f3168 	ldr	r3, [pc, #360]	; 11f4 <__call_exitprocs+0x174>
    1088:	e5933000 	ldr	r3, [r3]
    108c:	e24dd014 	sub	sp, sp, #20
    1090:	e58d3004 	str	r3, [sp, #4]
    1094:	e2833f52 	add	r3, r3, #328	; 0x148
    1098:	e58d0008 	str	r0, [sp, #8]
    109c:	e58d300c 	str	r3, [sp, #12]
    10a0:	e1a07001 	mov	r7, r1
    10a4:	e3a08001 	mov	r8, #1
    10a8:	e59d3004 	ldr	r3, [sp, #4]
    10ac:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    10b0:	e3560000 	cmp	r6, #0
    10b4:	e59db00c 	ldr	r11, [sp, #12]
    10b8:	0a000033 	beq	118c <__call_exitprocs+0x10c>
    10bc:	e5965004 	ldr	r5, [r6, #4]
    10c0:	e2554001 	subs	r4, r5, #1
    10c4:	5286a088 	addpl	r10, r6, #136	; 0x88
    10c8:	5285501f 	addpl	r5, r5, #31
    10cc:	508a5105 	addpl	r5, r10, r5, lsl #2
    10d0:	5a000007 	bpl	10f4 <__call_exitprocs+0x74>
    10d4:	ea000029 	b	1180 <__call_exitprocs+0x100>
    10d8:	e5953000 	ldr	r3, [r5]
    10dc:	e1530007 	cmp	r3, r7
    10e0:	0a000005 	beq	10fc <__call_exitprocs+0x7c>
    10e4:	e2444001 	sub	r4, r4, #1
    10e8:	e3740001 	cmn	r4, #1
    10ec:	e2455004 	sub	r5, r5, #4
    10f0:	0a000022 	beq	1180 <__call_exitprocs+0x100>
    10f4:	e3570000 	cmp	r7, #0
    10f8:	1afffff6 	bne	10d8 <__call_exitprocs+0x58>
    10fc:	e5963004 	ldr	r3, [r6, #4]
    1100:	e06a2005 	rsb	r2, r10, r5
    1104:	e2433001 	sub	r3, r3, #1
    1108:	e0862002 	add	r2, r6, r2
    110c:	e1530004 	cmp	r3, r4
    1110:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1114:	13a01000 	movne	r1, #0
    1118:	05864004 	streq	r4, [r6, #4]
    111c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1120:	e3530000 	cmp	r3, #0
    1124:	0affffee 	beq	10e4 <__call_exitprocs+0x64>
    1128:	e1a02418 	lsl	r2, r8, r4
    112c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1130:	e1120001 	tst	r2, r1
    1134:	e5969004 	ldr	r9, [r6, #4]
    1138:	0a000016 	beq	1198 <__call_exitprocs+0x118>
    113c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1140:	e1120001 	tst	r2, r1
    1144:	1a000016 	bne	11a4 <__call_exitprocs+0x124>
    1148:	e59d0008 	ldr	r0, [sp, #8]
    114c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1150:	e1a0e00f 	mov	lr, pc
    1154:	e12fff13 	bx	r3
    1158:	e5963004 	ldr	r3, [r6, #4]
    115c:	e1530009 	cmp	r3, r9
    1160:	1affffd0 	bne	10a8 <__call_exitprocs+0x28>
    1164:	e59b3000 	ldr	r3, [r11]
    1168:	e1530006 	cmp	r3, r6
    116c:	1affffcd 	bne	10a8 <__call_exitprocs+0x28>
    1170:	e2444001 	sub	r4, r4, #1
    1174:	e3740001 	cmn	r4, #1
    1178:	e2455004 	sub	r5, r5, #4
    117c:	1affffdc 	bne	10f4 <__call_exitprocs+0x74>
    1180:	e59f1070 	ldr	r1, [pc, #112]	; 11f8 <__call_exitprocs+0x178>
    1184:	e3510000 	cmp	r1, #0
    1188:	1a000009 	bne	11b4 <__call_exitprocs+0x134>
    118c:	e28dd014 	add	sp, sp, #20
    1190:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1194:	e12fff1e 	bx	lr
    1198:	e1a0e00f 	mov	lr, pc
    119c:	e12fff13 	bx	r3
    11a0:	eaffffec 	b	1158 <__call_exitprocs+0xd8>
    11a4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    11a8:	e1a0e00f 	mov	lr, pc
    11ac:	e12fff13 	bx	r3
    11b0:	eaffffe8 	b	1158 <__call_exitprocs+0xd8>
    11b4:	e5963004 	ldr	r3, [r6, #4]
    11b8:	e3530000 	cmp	r3, #0
    11bc:	e5963000 	ldr	r3, [r6]
    11c0:	1a000008 	bne	11e8 <__call_exitprocs+0x168>
    11c4:	e3530000 	cmp	r3, #0
    11c8:	0a000006 	beq	11e8 <__call_exitprocs+0x168>
    11cc:	e1a00006 	mov	r0, r6
    11d0:	e58b3000 	str	r3, [r11]
    11d4:	e320f000 	nop	{0}
    11d8:	e59b6000 	ldr	r6, [r11]
    11dc:	e3560000 	cmp	r6, #0
    11e0:	1affffb5 	bne	10bc <__call_exitprocs+0x3c>
    11e4:	eaffffe8 	b	118c <__call_exitprocs+0x10c>
    11e8:	e1a0b006 	mov	r11, r6
    11ec:	e1a06003 	mov	r6, r3
    11f0:	eafffff9 	b	11dc <__call_exitprocs+0x15c>
    11f4:	00001360 	.word	0x00001360
    11f8:	00000000 	.word	0x00000000

000011fc <register_fini>:
    11fc:	e92d4008 	push	{r3, lr}
    1200:	e59f3010 	ldr	r3, [pc, #16]	; 1218 <register_fini+0x1c>
    1204:	e3530000 	cmp	r3, #0
    1208:	159f000c 	ldrne	r0, [pc, #12]	; 121c <register_fini+0x20>
    120c:	1bffff49 	blne	f38 <atexit>
    1210:	e8bd4008 	pop	{r3, lr}
    1214:	e12fff1e 	bx	lr
    1218:	00001388 	.word	0x00001388
    121c:	00001220 	.word	0x00001220

00001220 <__libc_fini_array>:
    1220:	e92d4038 	push	{r3, r4, r5, lr}
    1224:	e59f5030 	ldr	r5, [pc, #48]	; 125c <__libc_fini_array+0x3c>
    1228:	e59f4030 	ldr	r4, [pc, #48]	; 1260 <__libc_fini_array+0x40>
    122c:	e0654004 	rsb	r4, r5, r4
    1230:	e1b04144 	asrs	r4, r4, #2
    1234:	10855104 	addne	r5, r5, r4, lsl #2
    1238:	0a000004 	beq	1250 <__libc_fini_array+0x30>
    123c:	e5353004 	ldr	r3, [r5, #-4]!
    1240:	e1a0e00f 	mov	lr, pc
    1244:	e12fff13 	bx	r3
    1248:	e2544001 	subs	r4, r4, #1
    124c:	1afffffa 	bne	123c <__libc_fini_array+0x1c>
    1250:	eb00004c 	bl	1388 <__libc_fini>
    1254:	e8bd4038 	pop	{r3, r4, r5, lr}
    1258:	e12fff1e 	bx	lr
    125c:	000013a0 	.word	0x000013a0
    1260:	000013a4 	.word	0x000013a4

00001264 <__cs3_premain>:
    1264:	e92d4008 	push	{r3, lr}
    1268:	eb000017 	bl	12cc <__libc_init_array>
    126c:	e59f3030 	ldr	r3, [pc, #48]	; 12a4 <__cs3_premain+0x40>
    1270:	e3530000 	cmp	r3, #0
    1274:	15930000 	ldrne	r0, [r3]
    1278:	01a00003 	moveq	r0, r3
    127c:	e59f3024 	ldr	r3, [pc, #36]	; 12a8 <__cs3_premain+0x44>
    1280:	e3530000 	cmp	r3, #0
    1284:	15931000 	ldrne	r1, [r3]
    1288:	01a01003 	moveq	r1, r3
    128c:	e3a02000 	mov	r2, #0
    1290:	ebfffbf1 	bl	25c <main>
    1294:	e59f3010 	ldr	r3, [pc, #16]	; 12ac <__cs3_premain+0x48>
    1298:	e3530000 	cmp	r3, #0
    129c:	1bffff2d 	blne	f58 <exit>
    12a0:	eafffffe 	b	12a0 <__cs3_premain+0x3c>
	...
    12ac:	00000f58 	.word	0x00000f58

000012b0 <_exit>:
    12b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    12b4:	e3a00018 	mov	r0, #24
    12b8:	e59f1004 	ldr	r1, [pc, #4]	; 12c4 <_exit+0x14>
    12bc:	ef123456 	svc	0x00123456
    12c0:	eafffffe 	b	12c0 <_exit+0x10>
    12c4:	00020026 	.word	0x00020026

000012c8 <__cs3_isr_interrupt>:
    12c8:	eafffffe 	b	12c8 <__cs3_isr_interrupt>

000012cc <__libc_init_array>:
    12cc:	e92d4070 	push	{r4, r5, r6, lr}
    12d0:	e59f506c 	ldr	r5, [pc, #108]	; 1344 <__libc_init_array+0x78>
    12d4:	e59f606c 	ldr	r6, [pc, #108]	; 1348 <__libc_init_array+0x7c>
    12d8:	e0656006 	rsb	r6, r5, r6
    12dc:	e1b06146 	asrs	r6, r6, #2
    12e0:	12455004 	subne	r5, r5, #4
    12e4:	13a04000 	movne	r4, #0
    12e8:	0a000005 	beq	1304 <__libc_init_array+0x38>
    12ec:	e5b53004 	ldr	r3, [r5, #4]!
    12f0:	e2844001 	add	r4, r4, #1
    12f4:	e1a0e00f 	mov	lr, pc
    12f8:	e12fff13 	bx	r3
    12fc:	e1560004 	cmp	r6, r4
    1300:	1afffff9 	bne	12ec <__libc_init_array+0x20>
    1304:	e59f5040 	ldr	r5, [pc, #64]	; 134c <__libc_init_array+0x80>
    1308:	e59f6040 	ldr	r6, [pc, #64]	; 1350 <__libc_init_array+0x84>
    130c:	e0656006 	rsb	r6, r5, r6
    1310:	eb000014 	bl	1368 <_init>
    1314:	e1b06146 	asrs	r6, r6, #2
    1318:	12455004 	subne	r5, r5, #4
    131c:	13a04000 	movne	r4, #0
    1320:	0a000005 	beq	133c <__libc_init_array+0x70>
    1324:	e5b53004 	ldr	r3, [r5, #4]!
    1328:	e2844001 	add	r4, r4, #1
    132c:	e1a0e00f 	mov	lr, pc
    1330:	e12fff13 	bx	r3
    1334:	e1560004 	cmp	r6, r4
    1338:	1afffff9 	bne	1324 <__libc_init_array+0x58>
    133c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1340:	e12fff1e 	bx	lr
    1344:	00001380 	.word	0x00001380
    1348:	00001380 	.word	0x00001380
    134c:	00001380 	.word	0x00001380
    1350:	00001388 	.word	0x00001388

Disassembly of section .rodata:

00001358 <_global_impure_ptr-0x8>:
    1358:	00000049 	.word	0x00000049
    135c:	000000c7 	.word	0x000000c7

00001360 <_global_impure_ptr>:
    1360:	000013c8 00000043                       ....C...

00001368 <_init>:
    1368:	e1a0c00d 	mov	r12, sp
    136c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1370:	e24cb004 	sub	r11, r12, #4
    1374:	e24bd028 	sub	sp, r11, #40	; 0x28
    1378:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    137c:	e12fff1e 	bx	lr

00001380 <__init_array_start>:
    1380:	000011fc 	.word	0x000011fc

00001384 <__frame_dummy_init_array_entry>:
    1384:	00000208                                ....

00001388 <__libc_fini>:
    1388:	e1a0c00d 	mov	r12, sp
    138c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1390:	e24cb004 	sub	r11, r12, #4
    1394:	e24bd028 	sub	sp, r11, #40	; 0x28
    1398:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    139c:	e12fff1e 	bx	lr

000013a0 <__fini_array_start>:
    13a0:	000001c4 	.word	0x000001c4

000013a4 <__cs3_regions>:
    13a4:	00000000 	.word	0x00000000
    13a8:	00000040 	.word	0x00000040
    13ac:	00000040 	.word	0x00000040
    13b0:	000017b8 	.word	0x000017b8
    13b4:	00000020 	.word	0x00000020
