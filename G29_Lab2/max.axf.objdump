
//campus.mcgill.ca/EMF/ELE/yzhu412/Desktop/ECSE324/G29_Lab2/max.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:
			LDR R4, =RESULT			// R4 points to the result lication
   0:	e59f4068 	ldr	r4, [pc, #104]	; 70 <NUMBERS+0x20>
			LDR R2, [R4, #4]  		// R2 holds the number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8			// R3 points to the first number
   8:	e2843008 	add	r3, r4, #8
			LDR R0, [R3]			// R0 holds the first number in the list
   c:	e5930000 	ldr	r0, [r3]
			PUSH {R4,LR} 			// PUSH R4, LR into stack
  10:	e92d4010 	push	{r4, lr}
			BL MAX					// Call subroutine MAX for finding max
  14:	eb000002 	bl	24 <MAX>
			POP {R4,LR}				// POP R4, LR out of stack
  18:	e8bd4010 	pop	{r4, lr}
			STR R0, [R4]			// Store the largest number result into R4
  1c:	e5840000 	str	r0, [r4]
			B END
  20:	ea000007 	b	44 <END>

00000024 <MAX>:

MAX:
			SUBS R2, R2, #1			// Decrement the loop counter
  24:	e2522001 	subs	r2, r2, #1
			BXEQ LR					// If the counter reaches 0 back to main class
  28:	012fff1e 	bxeq	lr
			ADD R3, R3, #4			// R3 points the next number in the list
  2c:	e2833004 	add	r3, r3, #4
		    LDR R1, [R3]			// R1 holds the value of next element
  30:	e5931000 	ldr	r1, [r3]
			CMP R0, R1				// Compare the result and R1
  34:	e1500001 	cmp	r0, r1
		    BGE MAX  				// If the result is greater then back to MAX 
  38:	aafffff9 	bge	24 <MAX>
			MOV R0, R1				// If R1 is greater then swap R0 R1
  3c:	e1a00001 	mov	r0, r1
			B MAX					// Back to the loop
  40:	eafffff7 	b	24 <MAX>

00000044 <END>:

END:		B END					// Infinite loop
  44:	eafffffe 	b	44 <END>

00000048 <RESULT>:
  48:	00000000 	.word	0x00000000

0000004c <N>:
  4c:	00000008 	.word	0x00000008

00000050 <NUMBERS>:
  50:	00000004 	.word	0x00000004
  54:	00000014 	.word	0x00000014
  58:	fffffffd 	.word	0xfffffffd
  5c:	00000006 	.word	0x00000006
  60:	00000001 	.word	0x00000001
  64:	00000055 	.word	0x00000055
  68:	00000002 	.word	0x00000002
  6c:	00000005 	.word	0x00000005
  70:	00000048 	.word	0x00000048
